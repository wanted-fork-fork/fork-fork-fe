/**
 * Generated by orval v6.31.0 üç∫
 * Do not edit manually.
 * GOOGOO API
 * GOOGOO API Documentation
 * OpenAPI spec version: 0.0.1
 */
import {
  faker
} from '@faker-js/faker'
import {
  HttpResponse,
  delay,
  http
} from 'msw'
import { customInstance } from './shared/lib/custom_instance';
export type LoginKakaoParams = {
code: string;
};

export type SearchGroupInfoParams = {
searchGroupInfoRequestDto: SearchGroupInfoRequestDto;
};

export type SearchInfoParams = {
searchInfoRequestDto: SearchInfoRequestDto;
};

export type ApplyToJoinGroupParams = {
inviteKey: string;
};

export type UploadImageBody = {
  image: Blob;
};

export type SaveInfoParams = {
linkKey: string;
};

export interface UserEnrollmentStatusResponse {
  hasEmail: boolean;
  hasSeenOnboarding: boolean;
  inEmailOptOut: boolean;
}

export type UserInfoResponseJoinType = typeof UserInfoResponseJoinType[keyof typeof UserInfoResponseJoinType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UserInfoResponseJoinType = {
  KAKAO: 'KAKAO',
  EMAIL: 'EMAIL',
} as const;

export interface UserInfoResponse {
  email?: string;
  joinType: UserInfoResponseJoinType;
  name: string;
  profileImage?: string;
  receiveEmail: boolean;
  userId: string;
}

export interface ValidateGroupInviteLinkResponse {
  creatorName?: string;
  groupId?: string;
  groupName?: string;
  isValid: boolean;
  reason?: string;
}

export interface AvailableCandidateResponse {
  info: ArchivedInfoResponse;
  isAlreadyInGroup: boolean;
}

export interface GroupInfoDetailResponse {
  comment?: string;
  creatorImage?: string;
  creatorName: string;
  idealPartner?: DetailedInfoIdealPartner;
  infoId: string;
  isCreatedByMe: boolean;
  userInfo: DetailedInfoUserInfo;
}

export type GroupHistoryResponseType = typeof GroupHistoryResponseType[keyof typeof GroupHistoryResponseType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GroupHistoryResponseType = {
  INFO_ADDED: 'INFO_ADDED',
  INFO_SHARED: 'INFO_SHARED',
} as const;

export interface GroupHistoryResponse {
  infoId: string;
  timestamp: string;
  type: GroupHistoryResponseType;
  userId: string;
  userName: string;
  userProfileImage?: string;
}

export type GroupMemberResponseStatus = typeof GroupMemberResponseStatus[keyof typeof GroupMemberResponseStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GroupMemberResponseStatus = {
  ADMIN: 'ADMIN',
  MEMBER: 'MEMBER',
  PENDING: 'PENDING',
} as const;

export interface GroupMemberResponse {
  status: GroupMemberResponseStatus;
  userId: string;
  userName: string;
}

export type GroupInfoWithDetailResponseMbti = typeof GroupInfoWithDetailResponseMbti[keyof typeof GroupInfoWithDetailResponseMbti];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GroupInfoWithDetailResponseMbti = {
  ENFP: 'ENFP',
  ENFJ: 'ENFJ',
  ENTJ: 'ENTJ',
  ENTP: 'ENTP',
  ESFJ: 'ESFJ',
  ESFP: 'ESFP',
  ESTJ: 'ESTJ',
  ESTP: 'ESTP',
  INFJ: 'INFJ',
  INFP: 'INFP',
  INTJ: 'INTJ',
  INTP: 'INTP',
  ISFJ: 'ISFJ',
  ISFP: 'ISFP',
  ISTJ: 'ISTJ',
  ISTP: 'ISTP',
} as const;

export type GroupInfoWithDetailResponseGender = typeof GroupInfoWithDetailResponseGender[keyof typeof GroupInfoWithDetailResponseGender];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GroupInfoWithDetailResponseGender = {
  MALE: 'MALE',
  FEMALE: 'FEMALE',
} as const;

export interface GroupInfoWithDetailResponse {
  birthDate: string;
  comment?: string;
  creatorImage?: string;
  creatorName: string;
  drinking: UserInfoDrinking;
  gender: GroupInfoWithDetailResponseGender;
  height: number;
  hobbies: string[];
  id?: string;
  images: InfoImage[];
  isCreatedByMe: boolean;
  job: Job;
  location: UserInfoLocation;
  mbti?: GroupInfoWithDetailResponseMbti;
  name: string;
  religion: Religion;
  smoking: UserInfoSmoking;
}

export interface SearchGroupInfoResponse {
  count: number;
  infos: GroupInfoWithDetailResponse[];
}

export type SearchGroupInfoRequestDtoTownListItem = typeof SearchGroupInfoRequestDtoTownListItem[keyof typeof SearchGroupInfoRequestDtoTownListItem];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SearchGroupInfoRequestDtoTownListItem = {
  GANGNAM: 'GANGNAM',
  GANGDONG: 'GANGDONG',
  GANGBUK: 'GANGBUK',
  GANGSEO: 'GANGSEO',
  GWANAK: 'GWANAK',
  GWANGJIN: 'GWANGJIN',
  GURO: 'GURO',
  GEUMCHEON: 'GEUMCHEON',
  NOWON: 'NOWON',
  DOBONG: 'DOBONG',
  DONGDAEMUN: 'DONGDAEMUN',
  DONGJAK: 'DONGJAK',
  MAPO: 'MAPO',
  SEODAEMUN: 'SEODAEMUN',
  SEOCHO: 'SEOCHO',
  SEONGDONG: 'SEONGDONG',
  SEONGBUK: 'SEONGBUK',
  SONGPA: 'SONGPA',
  YANGCHEON: 'YANGCHEON',
  YEONGDEUNGPO: 'YEONGDEUNGPO',
  YONGSAN: 'YONGSAN',
  EUNPYEONG: 'EUNPYEONG',
  JONGNO: 'JONGNO',
  SEOUL_JUNG: 'SEOUL_JUNG',
  JUNGRANG: 'JUNGRANG',
  GAPYEONG: 'GAPYEONG',
  GOYANG: 'GOYANG',
  GWACHEON: 'GWACHEON',
  GWANGMYEONG: 'GWANGMYEONG',
  GWANGJU: 'GWANGJU',
  GURI: 'GURI',
  GUNPO: 'GUNPO',
  GIMPO: 'GIMPO',
  NAMYANGJU: 'NAMYANGJU',
  DONGDUCHEON: 'DONGDUCHEON',
  BUCHEON: 'BUCHEON',
  SEONGNAM: 'SEONGNAM',
  SUWON: 'SUWON',
  SIHEUNG: 'SIHEUNG',
  ANSAN: 'ANSAN',
  ANSEONG: 'ANSEONG',
  ANYANG: 'ANYANG',
  YANGJU: 'YANGJU',
  YANGPYEONG: 'YANGPYEONG',
  YEOJU: 'YEOJU',
  YEONCHEON: 'YEONCHEON',
  OSAN: 'OSAN',
  YONGIN: 'YONGIN',
  UIWANG: 'UIWANG',
  UIJEONGBU: 'UIJEONGBU',
  ICHEON: 'ICHEON',
  PAJU: 'PAJU',
  PYEONGTAEK: 'PYEONGTAEK',
  POCHEON: 'POCHEON',
  HANAM: 'HANAM',
  HWASEONG: 'HWASEONG',
  GANGHWA: 'GANGHWA',
  GYEYANG: 'GYEYANG',
  NAMDONG: 'NAMDONG',
  INCHEON_DONG: 'INCHEON_DONG',
  MICHUHOL: 'MICHUHOL',
  BUPYEONG: 'BUPYEONG',
  SEO: 'SEO',
  YEONSU: 'YEONSU',
  ONGJIN: 'ONGJIN',
  INCHEON_JUNG: 'INCHEON_JUNG',
  DAEDEOK: 'DAEDEOK',
  DAEJEON_DONG: 'DAEJEON_DONG',
  DAEJEON_SEO: 'DAEJEON_SEO',
  YUSEONG: 'YUSEONG',
  DAEJEON_JUNG: 'DAEJEON_JUNG',
  BUSAN_GANGSEO: 'BUSAN_GANGSEO',
  GEUMJEONG: 'GEUMJEONG',
  GIJANG: 'GIJANG',
  BUSAN_NAM: 'BUSAN_NAM',
  BUSAN_DONG: 'BUSAN_DONG',
  DONGNAE: 'DONGNAE',
  BUSANJIN: 'BUSANJIN',
  BUSAN_BUK: 'BUSAN_BUK',
  SASANG: 'SASANG',
  SAHA: 'SAHA',
  BUSAN_SEO: 'BUSAN_SEO',
  SUYEONG: 'SUYEONG',
  YEONJE: 'YEONJE',
  YEONGDO: 'YEONGDO',
  BUSAN_JUNG: 'BUSAN_JUNG',
  HAEUNDAE: 'HAEUNDAE',
  ULSAN_NAM: 'ULSAN_NAM',
  ULSAN_DONG: 'ULSAN_DONG',
  ULSAN_BUK: 'ULSAN_BUK',
  ULJU: 'ULJU',
  ULSAN_JUNG: 'ULSAN_JUNG',
  GWANGSAN: 'GWANGSAN',
  GWANGJU_NAM: 'GWANGJU_NAM',
  GWANGJU_DONG: 'GWANGJU_DONG',
  GWANGJU_BUK: 'GWANGJU_BUK',
  GWANGJU_SEO: 'GWANGJU_SEO',
  GANGNEUNG: 'GANGNEUNG',
  GOSEONG: 'GOSEONG',
  DONGHAE: 'DONGHAE',
  SAMCHEOK: 'SAMCHEOK',
  SOKCHO: 'SOKCHO',
  YANGGU: 'YANGGU',
  YANGYANG: 'YANGYANG',
  YEONGWOL: 'YEONGWOL',
  WONJU: 'WONJU',
  INJE: 'INJE',
  JEONGSEON: 'JEONGSEON',
  CHEORWON: 'CHEORWON',
  CHUNCHEON: 'CHUNCHEON',
  TAEBAEK: 'TAEBAEK',
  PYEONGCHANG: 'PYEONGCHANG',
  HONGCHEON: 'HONGCHEON',
  HWACHEON: 'HWACHEON',
  HOENGSEONG: 'HOENGSEONG',
  SEJONG: 'SEJONG',
  GOESAN: 'GOESAN',
  DANYANG: 'DANYANG',
  BOEUN: 'BOEUN',
  YEONGDONG: 'YEONGDONG',
  OKCHEON: 'OKCHEON',
  EUMSEONG: 'EUMSEONG',
  JECHEON: 'JECHEON',
  JEUNGPYEONG: 'JEUNGPYEONG',
  JINCHEON: 'JINCHEON',
  CHEONGJU: 'CHEONGJU',
  CHUNGJU: 'CHUNGJU',
  GYERYONG: 'GYERYONG',
  GONGJU: 'GONGJU',
  GEUMSAN: 'GEUMSAN',
  NONSAN: 'NONSAN',
  DANGJIN: 'DANGJIN',
  BORYEONG: 'BORYEONG',
  BUYEO: 'BUYEO',
  SEOSAN: 'SEOSAN',
  SEOCHON: 'SEOCHON',
  ASAN: 'ASAN',
  YEONGI: 'YEONGI',
  YESAN: 'YESAN',
  CHEONAN: 'CHEONAN',
  CHEONGYANG: 'CHEONGYANG',
  TAEAN: 'TAEAN',
  HONGSEONG: 'HONGSEONG',
  GYEONGSAN: 'GYEONGSAN',
  GYEONGJU: 'GYEONGJU',
  GORYEONG: 'GORYEONG',
  GUMI: 'GUMI',
  GIMCHEON: 'GIMCHEON',
  MUNGYEONG: 'MUNGYEONG',
  BONGHWA: 'BONGHWA',
  SANGJU: 'SANGJU',
  SEONGJU: 'SEONGJU',
  ANDONG: 'ANDONG',
  YEONGDEOK: 'YEONGDEOK',
  YEONGYANG: 'YEONGYANG',
  YEONGJU: 'YEONGJU',
  YEONGCHEON: 'YEONGCHEON',
  YECHUN: 'YECHUN',
  ULLUNG: 'ULLUNG',
  ULJIN: 'ULJIN',
  UISEONG: 'UISEONG',
  CHEONGDO: 'CHEONGDO',
  CHEONGSONG: 'CHEONGSONG',
  CHILGOK: 'CHILGOK',
  POHANG: 'POHANG',
  GEOJE: 'GEOJE',
  GEOCHANG: 'GEOCHANG',
  GOSEONG_GN: 'GOSEONG_GN',
  GIMHAE: 'GIMHAE',
  NAMHAE: 'NAMHAE',
  MIRYANG: 'MIRYANG',
  SACHEON: 'SACHEON',
  SANCHEONG: 'SANCHEONG',
  YANGSAN: 'YANGSAN',
  UIRYEONG: 'UIRYEONG',
  JINJU: 'JINJU',
  CHANGNYEONG: 'CHANGNYEONG',
  CHANGWON: 'CHANGWON',
  TONGYEONG: 'TONGYEONG',
  HADONG: 'HADONG',
  HAMAN: 'HAMAN',
  HAMYANG: 'HAMYANG',
  HAPCHEON: 'HAPCHEON',
  GOCHANG: 'GOCHANG',
  GUNSAN: 'GUNSAN',
  GIMJE: 'GIMJE',
  NAMWON: 'NAMWON',
  MUJU: 'MUJU',
  BUAN: 'BUAN',
  SUNCHANG: 'SUNCHANG',
  WANJU: 'WANJU',
  IKSAN: 'IKSAN',
  IMSIL: 'IMSIL',
  JANGSU: 'JANGSU',
  JEONJU: 'JEONJU',
  JEONGEUP: 'JEONGEUP',
  JINAN: 'JINAN',
  GANGJIN: 'GANGJIN',
  GOHEUNG: 'GOHEUNG',
  GOKSEONG: 'GOKSEONG',
  GWANGYANG: 'GWANGYANG',
  GURYE: 'GURYE',
  NAJU: 'NAJU',
  DAMYANG: 'DAMYANG',
  MOKPO: 'MOKPO',
  MUAN: 'MUAN',
  BOSEONG: 'BOSEONG',
  SUNCHEON: 'SUNCHEON',
  SINAN: 'SINAN',
  YEOSU: 'YEOSU',
  YEONGGWANG: 'YEONGGWANG',
  YEONGAM: 'YEONGAM',
  WANDO: 'WANDO',
  JANGSEONG: 'JANGSEONG',
  JANGHEUNG: 'JANGHEUNG',
  JINDO: 'JINDO',
  HAMPYEONG: 'HAMPYEONG',
  HAENAM: 'HAENAM',
  HWASUN: 'HWASUN',
  JEJU: 'JEJU',
  SEOGWIPO: 'SEOGWIPO',
  GUNWEE: 'GUNWEE',
  DAEGU_NAM: 'DAEGU_NAM',
  DALSEO: 'DALSEO',
  DALSEONG: 'DALSEONG',
  DAEGU_DONG: 'DAEGU_DONG',
  DAEGU_BUK: 'DAEGU_BUK',
  DAEGU_SEO: 'DAEGU_SEO',
  SUSEONG: 'SUSEONG',
  DAEGU_JUNG: 'DAEGU_JUNG',
} as const;

export type SearchGroupInfoRequestDtoSortDirection = typeof SearchGroupInfoRequestDtoSortDirection[keyof typeof SearchGroupInfoRequestDtoSortDirection];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SearchGroupInfoRequestDtoSortDirection = {
  ASC: 'ASC',
  DESC: 'DESC',
} as const;

export type SearchGroupInfoRequestDtoSortBy = typeof SearchGroupInfoRequestDtoSortBy[keyof typeof SearchGroupInfoRequestDtoSortBy];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SearchGroupInfoRequestDtoSortBy = {
  CREATED_DATE: 'CREATED_DATE',
  NAME: 'NAME',
} as const;

export type SearchGroupInfoRequestDtoGender = typeof SearchGroupInfoRequestDtoGender[keyof typeof SearchGroupInfoRequestDtoGender];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SearchGroupInfoRequestDtoGender = {
  MALE: 'MALE',
  FEMALE: 'FEMALE',
} as const;

export interface SearchGroupInfoRequestDto {
  ageFrom?: string;
  ageTo?: string;
  gender?: SearchGroupInfoRequestDtoGender;
  heightFrom?: number;
  heightTo?: number;
  page?: number;
  size?: number;
  sortBy?: SearchGroupInfoRequestDtoSortBy;
  sortDirection?: SearchGroupInfoRequestDtoSortDirection;
  townList?: SearchGroupInfoRequestDtoTownListItem[];
}

export type GroupInfoResponseMyStatus = typeof GroupInfoResponseMyStatus[keyof typeof GroupInfoResponseMyStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GroupInfoResponseMyStatus = {
  ADMIN: 'ADMIN',
  MEMBER: 'MEMBER',
  PENDING: 'PENDING',
} as const;

export type GroupInfoResponseGroupIcon = typeof GroupInfoResponseGroupIcon[keyof typeof GroupInfoResponseGroupIcon];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GroupInfoResponseGroupIcon = {
  LOCK: 'LOCK',
  ARROW: 'ARROW',
  LETTER: 'LETTER',
  HEART: 'HEART',
  FOOTPRINT: 'FOOTPRINT',
  WINE_GLASS: 'WINE_GLASS',
  EGG: 'EGG',
  BOUQUET: 'BOUQUET',
  RING: 'RING',
  STAR: 'STAR',
} as const;

export interface GroupInfoResponse {
  candidateCount: number;
  groupIcon: GroupInfoResponseGroupIcon;
  groupId: string;
  groupName: string;
  memberCount: number;
  myStatus: GroupInfoResponseMyStatus;
  pendingCount: number;
}

export type TownDtoTown = typeof TownDtoTown[keyof typeof TownDtoTown];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TownDtoTown = {
  GANGNAM: 'GANGNAM',
  GANGDONG: 'GANGDONG',
  GANGBUK: 'GANGBUK',
  GANGSEO: 'GANGSEO',
  GWANAK: 'GWANAK',
  GWANGJIN: 'GWANGJIN',
  GURO: 'GURO',
  GEUMCHEON: 'GEUMCHEON',
  NOWON: 'NOWON',
  DOBONG: 'DOBONG',
  DONGDAEMUN: 'DONGDAEMUN',
  DONGJAK: 'DONGJAK',
  MAPO: 'MAPO',
  SEODAEMUN: 'SEODAEMUN',
  SEOCHO: 'SEOCHO',
  SEONGDONG: 'SEONGDONG',
  SEONGBUK: 'SEONGBUK',
  SONGPA: 'SONGPA',
  YANGCHEON: 'YANGCHEON',
  YEONGDEUNGPO: 'YEONGDEUNGPO',
  YONGSAN: 'YONGSAN',
  EUNPYEONG: 'EUNPYEONG',
  JONGNO: 'JONGNO',
  SEOUL_JUNG: 'SEOUL_JUNG',
  JUNGRANG: 'JUNGRANG',
  GAPYEONG: 'GAPYEONG',
  GOYANG: 'GOYANG',
  GWACHEON: 'GWACHEON',
  GWANGMYEONG: 'GWANGMYEONG',
  GWANGJU: 'GWANGJU',
  GURI: 'GURI',
  GUNPO: 'GUNPO',
  GIMPO: 'GIMPO',
  NAMYANGJU: 'NAMYANGJU',
  DONGDUCHEON: 'DONGDUCHEON',
  BUCHEON: 'BUCHEON',
  SEONGNAM: 'SEONGNAM',
  SUWON: 'SUWON',
  SIHEUNG: 'SIHEUNG',
  ANSAN: 'ANSAN',
  ANSEONG: 'ANSEONG',
  ANYANG: 'ANYANG',
  YANGJU: 'YANGJU',
  YANGPYEONG: 'YANGPYEONG',
  YEOJU: 'YEOJU',
  YEONCHEON: 'YEONCHEON',
  OSAN: 'OSAN',
  YONGIN: 'YONGIN',
  UIWANG: 'UIWANG',
  UIJEONGBU: 'UIJEONGBU',
  ICHEON: 'ICHEON',
  PAJU: 'PAJU',
  PYEONGTAEK: 'PYEONGTAEK',
  POCHEON: 'POCHEON',
  HANAM: 'HANAM',
  HWASEONG: 'HWASEONG',
  GANGHWA: 'GANGHWA',
  GYEYANG: 'GYEYANG',
  NAMDONG: 'NAMDONG',
  INCHEON_DONG: 'INCHEON_DONG',
  MICHUHOL: 'MICHUHOL',
  BUPYEONG: 'BUPYEONG',
  SEO: 'SEO',
  YEONSU: 'YEONSU',
  ONGJIN: 'ONGJIN',
  INCHEON_JUNG: 'INCHEON_JUNG',
  DAEDEOK: 'DAEDEOK',
  DAEJEON_DONG: 'DAEJEON_DONG',
  DAEJEON_SEO: 'DAEJEON_SEO',
  YUSEONG: 'YUSEONG',
  DAEJEON_JUNG: 'DAEJEON_JUNG',
  BUSAN_GANGSEO: 'BUSAN_GANGSEO',
  GEUMJEONG: 'GEUMJEONG',
  GIJANG: 'GIJANG',
  BUSAN_NAM: 'BUSAN_NAM',
  BUSAN_DONG: 'BUSAN_DONG',
  DONGNAE: 'DONGNAE',
  BUSANJIN: 'BUSANJIN',
  BUSAN_BUK: 'BUSAN_BUK',
  SASANG: 'SASANG',
  SAHA: 'SAHA',
  BUSAN_SEO: 'BUSAN_SEO',
  SUYEONG: 'SUYEONG',
  YEONJE: 'YEONJE',
  YEONGDO: 'YEONGDO',
  BUSAN_JUNG: 'BUSAN_JUNG',
  HAEUNDAE: 'HAEUNDAE',
  ULSAN_NAM: 'ULSAN_NAM',
  ULSAN_DONG: 'ULSAN_DONG',
  ULSAN_BUK: 'ULSAN_BUK',
  ULJU: 'ULJU',
  ULSAN_JUNG: 'ULSAN_JUNG',
  GWANGSAN: 'GWANGSAN',
  GWANGJU_NAM: 'GWANGJU_NAM',
  GWANGJU_DONG: 'GWANGJU_DONG',
  GWANGJU_BUK: 'GWANGJU_BUK',
  GWANGJU_SEO: 'GWANGJU_SEO',
  GANGNEUNG: 'GANGNEUNG',
  GOSEONG: 'GOSEONG',
  DONGHAE: 'DONGHAE',
  SAMCHEOK: 'SAMCHEOK',
  SOKCHO: 'SOKCHO',
  YANGGU: 'YANGGU',
  YANGYANG: 'YANGYANG',
  YEONGWOL: 'YEONGWOL',
  WONJU: 'WONJU',
  INJE: 'INJE',
  JEONGSEON: 'JEONGSEON',
  CHEORWON: 'CHEORWON',
  CHUNCHEON: 'CHUNCHEON',
  TAEBAEK: 'TAEBAEK',
  PYEONGCHANG: 'PYEONGCHANG',
  HONGCHEON: 'HONGCHEON',
  HWACHEON: 'HWACHEON',
  HOENGSEONG: 'HOENGSEONG',
  SEJONG: 'SEJONG',
  GOESAN: 'GOESAN',
  DANYANG: 'DANYANG',
  BOEUN: 'BOEUN',
  YEONGDONG: 'YEONGDONG',
  OKCHEON: 'OKCHEON',
  EUMSEONG: 'EUMSEONG',
  JECHEON: 'JECHEON',
  JEUNGPYEONG: 'JEUNGPYEONG',
  JINCHEON: 'JINCHEON',
  CHEONGJU: 'CHEONGJU',
  CHUNGJU: 'CHUNGJU',
  GYERYONG: 'GYERYONG',
  GONGJU: 'GONGJU',
  GEUMSAN: 'GEUMSAN',
  NONSAN: 'NONSAN',
  DANGJIN: 'DANGJIN',
  BORYEONG: 'BORYEONG',
  BUYEO: 'BUYEO',
  SEOSAN: 'SEOSAN',
  SEOCHON: 'SEOCHON',
  ASAN: 'ASAN',
  YEONGI: 'YEONGI',
  YESAN: 'YESAN',
  CHEONAN: 'CHEONAN',
  CHEONGYANG: 'CHEONGYANG',
  TAEAN: 'TAEAN',
  HONGSEONG: 'HONGSEONG',
  GYEONGSAN: 'GYEONGSAN',
  GYEONGJU: 'GYEONGJU',
  GORYEONG: 'GORYEONG',
  GUMI: 'GUMI',
  GIMCHEON: 'GIMCHEON',
  MUNGYEONG: 'MUNGYEONG',
  BONGHWA: 'BONGHWA',
  SANGJU: 'SANGJU',
  SEONGJU: 'SEONGJU',
  ANDONG: 'ANDONG',
  YEONGDEOK: 'YEONGDEOK',
  YEONGYANG: 'YEONGYANG',
  YEONGJU: 'YEONGJU',
  YEONGCHEON: 'YEONGCHEON',
  YECHUN: 'YECHUN',
  ULLUNG: 'ULLUNG',
  ULJIN: 'ULJIN',
  UISEONG: 'UISEONG',
  CHEONGDO: 'CHEONGDO',
  CHEONGSONG: 'CHEONGSONG',
  CHILGOK: 'CHILGOK',
  POHANG: 'POHANG',
  GEOJE: 'GEOJE',
  GEOCHANG: 'GEOCHANG',
  GOSEONG_GN: 'GOSEONG_GN',
  GIMHAE: 'GIMHAE',
  NAMHAE: 'NAMHAE',
  MIRYANG: 'MIRYANG',
  SACHEON: 'SACHEON',
  SANCHEONG: 'SANCHEONG',
  YANGSAN: 'YANGSAN',
  UIRYEONG: 'UIRYEONG',
  JINJU: 'JINJU',
  CHANGNYEONG: 'CHANGNYEONG',
  CHANGWON: 'CHANGWON',
  TONGYEONG: 'TONGYEONG',
  HADONG: 'HADONG',
  HAMAN: 'HAMAN',
  HAMYANG: 'HAMYANG',
  HAPCHEON: 'HAPCHEON',
  GOCHANG: 'GOCHANG',
  GUNSAN: 'GUNSAN',
  GIMJE: 'GIMJE',
  NAMWON: 'NAMWON',
  MUJU: 'MUJU',
  BUAN: 'BUAN',
  SUNCHANG: 'SUNCHANG',
  WANJU: 'WANJU',
  IKSAN: 'IKSAN',
  IMSIL: 'IMSIL',
  JANGSU: 'JANGSU',
  JEONJU: 'JEONJU',
  JEONGEUP: 'JEONGEUP',
  JINAN: 'JINAN',
  GANGJIN: 'GANGJIN',
  GOHEUNG: 'GOHEUNG',
  GOKSEONG: 'GOKSEONG',
  GWANGYANG: 'GWANGYANG',
  GURYE: 'GURYE',
  NAJU: 'NAJU',
  DAMYANG: 'DAMYANG',
  MOKPO: 'MOKPO',
  MUAN: 'MUAN',
  BOSEONG: 'BOSEONG',
  SUNCHEON: 'SUNCHEON',
  SINAN: 'SINAN',
  YEOSU: 'YEOSU',
  YEONGGWANG: 'YEONGGWANG',
  YEONGAM: 'YEONGAM',
  WANDO: 'WANDO',
  JANGSEONG: 'JANGSEONG',
  JANGHEUNG: 'JANGHEUNG',
  JINDO: 'JINDO',
  HAMPYEONG: 'HAMPYEONG',
  HAENAM: 'HAENAM',
  HWASUN: 'HWASUN',
  JEJU: 'JEJU',
  SEOGWIPO: 'SEOGWIPO',
  GUNWEE: 'GUNWEE',
  DAEGU_NAM: 'DAEGU_NAM',
  DALSEO: 'DALSEO',
  DALSEONG: 'DALSEONG',
  DAEGU_DONG: 'DAEGU_DONG',
  DAEGU_BUK: 'DAEGU_BUK',
  DAEGU_SEO: 'DAEGU_SEO',
  SUSEONG: 'SUSEONG',
  DAEGU_JUNG: 'DAEGU_JUNG',
} as const;

export interface TownDto {
  town: TownDtoTown;
  townName: string;
}

export type CityDtoCity = typeof CityDtoCity[keyof typeof CityDtoCity];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CityDtoCity = {
  SEOUL: 'SEOUL',
  GYEONGGI: 'GYEONGGI',
  INCHEON: 'INCHEON',
  DAEJEON: 'DAEJEON',
  DAEGU: 'DAEGU',
  BUSAN: 'BUSAN',
  ULSAN: 'ULSAN',
  GWANGJU: 'GWANGJU',
  GANGWON: 'GANGWON',
  SEJONG: 'SEJONG',
  CHUNGCHEONGNAM: 'CHUNGCHEONGNAM',
  CHUNGCHEONGBUK: 'CHUNGCHEONGBUK',
  GYEONGSANGNAM: 'GYEONGSANGNAM',
  GYEONGSANGBUK: 'GYEONGSANGBUK',
  JEOLANAM: 'JEOLANAM',
  JEOLABUK: 'JEOLABUK',
  JEJU: 'JEJU',
} as const;

export interface CityDto {
  city: CityDtoCity;
  cityName: string;
}

export interface CityAndTownResponse {
  city: CityDto;
  town: TownDto[];
}

export interface SearchInfoResponse {
  count: number;
  infos: ArchivedInfoResponse[];
}

export type ArchivedInfoResponseMbti = typeof ArchivedInfoResponseMbti[keyof typeof ArchivedInfoResponseMbti];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ArchivedInfoResponseMbti = {
  ENFP: 'ENFP',
  ENFJ: 'ENFJ',
  ENTJ: 'ENTJ',
  ENTP: 'ENTP',
  ESFJ: 'ESFJ',
  ESFP: 'ESFP',
  ESTJ: 'ESTJ',
  ESTP: 'ESTP',
  INFJ: 'INFJ',
  INFP: 'INFP',
  INTJ: 'INTJ',
  INTP: 'INTP',
  ISFJ: 'ISFJ',
  ISFP: 'ISFP',
  ISTJ: 'ISTJ',
  ISTP: 'ISTP',
} as const;

export type ArchivedInfoResponseGender = typeof ArchivedInfoResponseGender[keyof typeof ArchivedInfoResponseGender];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ArchivedInfoResponseGender = {
  MALE: 'MALE',
  FEMALE: 'FEMALE',
} as const;

export interface ArchivedInfoResponse {
  birthDate: string;
  drinking: UserInfoDrinking;
  gender: ArchivedInfoResponseGender;
  height: number;
  hobbies: string[];
  id?: string;
  images: InfoImage[];
  job: Job;
  location: UserInfoLocation;
  mbti?: ArchivedInfoResponseMbti;
  name: string;
  religion: Religion;
  smoking: UserInfoSmoking;
}

export type SearchInfoRequestDtoTownListItem = typeof SearchInfoRequestDtoTownListItem[keyof typeof SearchInfoRequestDtoTownListItem];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SearchInfoRequestDtoTownListItem = {
  GANGNAM: 'GANGNAM',
  GANGDONG: 'GANGDONG',
  GANGBUK: 'GANGBUK',
  GANGSEO: 'GANGSEO',
  GWANAK: 'GWANAK',
  GWANGJIN: 'GWANGJIN',
  GURO: 'GURO',
  GEUMCHEON: 'GEUMCHEON',
  NOWON: 'NOWON',
  DOBONG: 'DOBONG',
  DONGDAEMUN: 'DONGDAEMUN',
  DONGJAK: 'DONGJAK',
  MAPO: 'MAPO',
  SEODAEMUN: 'SEODAEMUN',
  SEOCHO: 'SEOCHO',
  SEONGDONG: 'SEONGDONG',
  SEONGBUK: 'SEONGBUK',
  SONGPA: 'SONGPA',
  YANGCHEON: 'YANGCHEON',
  YEONGDEUNGPO: 'YEONGDEUNGPO',
  YONGSAN: 'YONGSAN',
  EUNPYEONG: 'EUNPYEONG',
  JONGNO: 'JONGNO',
  SEOUL_JUNG: 'SEOUL_JUNG',
  JUNGRANG: 'JUNGRANG',
  GAPYEONG: 'GAPYEONG',
  GOYANG: 'GOYANG',
  GWACHEON: 'GWACHEON',
  GWANGMYEONG: 'GWANGMYEONG',
  GWANGJU: 'GWANGJU',
  GURI: 'GURI',
  GUNPO: 'GUNPO',
  GIMPO: 'GIMPO',
  NAMYANGJU: 'NAMYANGJU',
  DONGDUCHEON: 'DONGDUCHEON',
  BUCHEON: 'BUCHEON',
  SEONGNAM: 'SEONGNAM',
  SUWON: 'SUWON',
  SIHEUNG: 'SIHEUNG',
  ANSAN: 'ANSAN',
  ANSEONG: 'ANSEONG',
  ANYANG: 'ANYANG',
  YANGJU: 'YANGJU',
  YANGPYEONG: 'YANGPYEONG',
  YEOJU: 'YEOJU',
  YEONCHEON: 'YEONCHEON',
  OSAN: 'OSAN',
  YONGIN: 'YONGIN',
  UIWANG: 'UIWANG',
  UIJEONGBU: 'UIJEONGBU',
  ICHEON: 'ICHEON',
  PAJU: 'PAJU',
  PYEONGTAEK: 'PYEONGTAEK',
  POCHEON: 'POCHEON',
  HANAM: 'HANAM',
  HWASEONG: 'HWASEONG',
  GANGHWA: 'GANGHWA',
  GYEYANG: 'GYEYANG',
  NAMDONG: 'NAMDONG',
  INCHEON_DONG: 'INCHEON_DONG',
  MICHUHOL: 'MICHUHOL',
  BUPYEONG: 'BUPYEONG',
  SEO: 'SEO',
  YEONSU: 'YEONSU',
  ONGJIN: 'ONGJIN',
  INCHEON_JUNG: 'INCHEON_JUNG',
  DAEDEOK: 'DAEDEOK',
  DAEJEON_DONG: 'DAEJEON_DONG',
  DAEJEON_SEO: 'DAEJEON_SEO',
  YUSEONG: 'YUSEONG',
  DAEJEON_JUNG: 'DAEJEON_JUNG',
  BUSAN_GANGSEO: 'BUSAN_GANGSEO',
  GEUMJEONG: 'GEUMJEONG',
  GIJANG: 'GIJANG',
  BUSAN_NAM: 'BUSAN_NAM',
  BUSAN_DONG: 'BUSAN_DONG',
  DONGNAE: 'DONGNAE',
  BUSANJIN: 'BUSANJIN',
  BUSAN_BUK: 'BUSAN_BUK',
  SASANG: 'SASANG',
  SAHA: 'SAHA',
  BUSAN_SEO: 'BUSAN_SEO',
  SUYEONG: 'SUYEONG',
  YEONJE: 'YEONJE',
  YEONGDO: 'YEONGDO',
  BUSAN_JUNG: 'BUSAN_JUNG',
  HAEUNDAE: 'HAEUNDAE',
  ULSAN_NAM: 'ULSAN_NAM',
  ULSAN_DONG: 'ULSAN_DONG',
  ULSAN_BUK: 'ULSAN_BUK',
  ULJU: 'ULJU',
  ULSAN_JUNG: 'ULSAN_JUNG',
  GWANGSAN: 'GWANGSAN',
  GWANGJU_NAM: 'GWANGJU_NAM',
  GWANGJU_DONG: 'GWANGJU_DONG',
  GWANGJU_BUK: 'GWANGJU_BUK',
  GWANGJU_SEO: 'GWANGJU_SEO',
  GANGNEUNG: 'GANGNEUNG',
  GOSEONG: 'GOSEONG',
  DONGHAE: 'DONGHAE',
  SAMCHEOK: 'SAMCHEOK',
  SOKCHO: 'SOKCHO',
  YANGGU: 'YANGGU',
  YANGYANG: 'YANGYANG',
  YEONGWOL: 'YEONGWOL',
  WONJU: 'WONJU',
  INJE: 'INJE',
  JEONGSEON: 'JEONGSEON',
  CHEORWON: 'CHEORWON',
  CHUNCHEON: 'CHUNCHEON',
  TAEBAEK: 'TAEBAEK',
  PYEONGCHANG: 'PYEONGCHANG',
  HONGCHEON: 'HONGCHEON',
  HWACHEON: 'HWACHEON',
  HOENGSEONG: 'HOENGSEONG',
  SEJONG: 'SEJONG',
  GOESAN: 'GOESAN',
  DANYANG: 'DANYANG',
  BOEUN: 'BOEUN',
  YEONGDONG: 'YEONGDONG',
  OKCHEON: 'OKCHEON',
  EUMSEONG: 'EUMSEONG',
  JECHEON: 'JECHEON',
  JEUNGPYEONG: 'JEUNGPYEONG',
  JINCHEON: 'JINCHEON',
  CHEONGJU: 'CHEONGJU',
  CHUNGJU: 'CHUNGJU',
  GYERYONG: 'GYERYONG',
  GONGJU: 'GONGJU',
  GEUMSAN: 'GEUMSAN',
  NONSAN: 'NONSAN',
  DANGJIN: 'DANGJIN',
  BORYEONG: 'BORYEONG',
  BUYEO: 'BUYEO',
  SEOSAN: 'SEOSAN',
  SEOCHON: 'SEOCHON',
  ASAN: 'ASAN',
  YEONGI: 'YEONGI',
  YESAN: 'YESAN',
  CHEONAN: 'CHEONAN',
  CHEONGYANG: 'CHEONGYANG',
  TAEAN: 'TAEAN',
  HONGSEONG: 'HONGSEONG',
  GYEONGSAN: 'GYEONGSAN',
  GYEONGJU: 'GYEONGJU',
  GORYEONG: 'GORYEONG',
  GUMI: 'GUMI',
  GIMCHEON: 'GIMCHEON',
  MUNGYEONG: 'MUNGYEONG',
  BONGHWA: 'BONGHWA',
  SANGJU: 'SANGJU',
  SEONGJU: 'SEONGJU',
  ANDONG: 'ANDONG',
  YEONGDEOK: 'YEONGDEOK',
  YEONGYANG: 'YEONGYANG',
  YEONGJU: 'YEONGJU',
  YEONGCHEON: 'YEONGCHEON',
  YECHUN: 'YECHUN',
  ULLUNG: 'ULLUNG',
  ULJIN: 'ULJIN',
  UISEONG: 'UISEONG',
  CHEONGDO: 'CHEONGDO',
  CHEONGSONG: 'CHEONGSONG',
  CHILGOK: 'CHILGOK',
  POHANG: 'POHANG',
  GEOJE: 'GEOJE',
  GEOCHANG: 'GEOCHANG',
  GOSEONG_GN: 'GOSEONG_GN',
  GIMHAE: 'GIMHAE',
  NAMHAE: 'NAMHAE',
  MIRYANG: 'MIRYANG',
  SACHEON: 'SACHEON',
  SANCHEONG: 'SANCHEONG',
  YANGSAN: 'YANGSAN',
  UIRYEONG: 'UIRYEONG',
  JINJU: 'JINJU',
  CHANGNYEONG: 'CHANGNYEONG',
  CHANGWON: 'CHANGWON',
  TONGYEONG: 'TONGYEONG',
  HADONG: 'HADONG',
  HAMAN: 'HAMAN',
  HAMYANG: 'HAMYANG',
  HAPCHEON: 'HAPCHEON',
  GOCHANG: 'GOCHANG',
  GUNSAN: 'GUNSAN',
  GIMJE: 'GIMJE',
  NAMWON: 'NAMWON',
  MUJU: 'MUJU',
  BUAN: 'BUAN',
  SUNCHANG: 'SUNCHANG',
  WANJU: 'WANJU',
  IKSAN: 'IKSAN',
  IMSIL: 'IMSIL',
  JANGSU: 'JANGSU',
  JEONJU: 'JEONJU',
  JEONGEUP: 'JEONGEUP',
  JINAN: 'JINAN',
  GANGJIN: 'GANGJIN',
  GOHEUNG: 'GOHEUNG',
  GOKSEONG: 'GOKSEONG',
  GWANGYANG: 'GWANGYANG',
  GURYE: 'GURYE',
  NAJU: 'NAJU',
  DAMYANG: 'DAMYANG',
  MOKPO: 'MOKPO',
  MUAN: 'MUAN',
  BOSEONG: 'BOSEONG',
  SUNCHEON: 'SUNCHEON',
  SINAN: 'SINAN',
  YEOSU: 'YEOSU',
  YEONGGWANG: 'YEONGGWANG',
  YEONGAM: 'YEONGAM',
  WANDO: 'WANDO',
  JANGSEONG: 'JANGSEONG',
  JANGHEUNG: 'JANGHEUNG',
  JINDO: 'JINDO',
  HAMPYEONG: 'HAMPYEONG',
  HAENAM: 'HAENAM',
  HWASUN: 'HWASUN',
  JEJU: 'JEJU',
  SEOGWIPO: 'SEOGWIPO',
  GUNWEE: 'GUNWEE',
  DAEGU_NAM: 'DAEGU_NAM',
  DALSEO: 'DALSEO',
  DALSEONG: 'DALSEONG',
  DAEGU_DONG: 'DAEGU_DONG',
  DAEGU_BUK: 'DAEGU_BUK',
  DAEGU_SEO: 'DAEGU_SEO',
  SUSEONG: 'SUSEONG',
  DAEGU_JUNG: 'DAEGU_JUNG',
} as const;

export type SearchInfoRequestDtoSortDirection = typeof SearchInfoRequestDtoSortDirection[keyof typeof SearchInfoRequestDtoSortDirection];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SearchInfoRequestDtoSortDirection = {
  ASC: 'ASC',
  DESC: 'DESC',
} as const;

export type SearchInfoRequestDtoSortBy = typeof SearchInfoRequestDtoSortBy[keyof typeof SearchInfoRequestDtoSortBy];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SearchInfoRequestDtoSortBy = {
  CREATED_DATE: 'CREATED_DATE',
  NAME: 'NAME',
} as const;

export type SearchInfoRequestDtoGender = typeof SearchInfoRequestDtoGender[keyof typeof SearchInfoRequestDtoGender];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SearchInfoRequestDtoGender = {
  MALE: 'MALE',
  FEMALE: 'FEMALE',
} as const;

export interface SearchInfoRequestDto {
  ageFrom?: string;
  ageTo?: string;
  gender?: SearchInfoRequestDtoGender;
  heightFrom?: number;
  heightTo?: number;
  page?: number;
  size?: number;
  sortBy?: SearchInfoRequestDtoSortBy;
  sortDirection?: SearchInfoRequestDtoSortDirection;
  townList?: SearchInfoRequestDtoTownListItem[];
}

export interface LinkStatusResponse {
  isOpen: boolean;
  linkId: string;
  linkKey: string;
}

export interface ValidateLinkResponse {
  isValid: boolean;
  linkId: string;
}

export type InfoToShareUserInfoMbti = typeof InfoToShareUserInfoMbti[keyof typeof InfoToShareUserInfoMbti];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const InfoToShareUserInfoMbti = {
  ENFP: 'ENFP',
  ENFJ: 'ENFJ',
  ENTJ: 'ENTJ',
  ENTP: 'ENTP',
  ESFJ: 'ESFJ',
  ESFP: 'ESFP',
  ESTJ: 'ESTJ',
  ESTP: 'ESTP',
  INFJ: 'INFJ',
  INFP: 'INFP',
  INTJ: 'INTJ',
  INTP: 'INTP',
  ISFJ: 'ISFJ',
  ISFP: 'ISFP',
  ISTJ: 'ISTJ',
  ISTP: 'ISTP',
} as const;

export type InfoToShareUserInfoGender = typeof InfoToShareUserInfoGender[keyof typeof InfoToShareUserInfoGender];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const InfoToShareUserInfoGender = {
  MALE: 'MALE',
  FEMALE: 'FEMALE',
} as const;

export interface InfoToShareUserInfo {
  birthDate: string;
  book?: Book;
  dateStyle?: string[];
  drinking: UserInfoDrinking;
  foods?: string[];
  gender: InfoToShareUserInfoGender;
  height: number;
  hobbies: string[];
  images: InfoImage[];
  introduction: string;
  job: Job;
  location: UserInfoLocation;
  mbti?: InfoToShareUserInfoMbti;
  movie?: Movie;
  pets?: string[];
  religion: Religion;
  smoking: UserInfoSmoking;
}

export interface InfoToShareResponse {
  expiredDate: string;
  sharingId: string;
  userInfo: InfoToShareUserInfo;
}

export interface SendCommonVerificationMailRequest {
  email: string;
  key: string;
}

export interface VerificationResultDto {
  duplicated?: boolean;
  email: string;
  isDuplicated?: boolean;
  isVerified: boolean;
  token?: string;
}

export interface EmailLoginRequest {
  email: string;
  password: string;
}

export interface VerifyCommonVerificationMailRequest {
  key: string;
  verifyCode: string;
}

export interface SignupRequest {
  email: string;
  name: string;
  password: string;
}

export interface SendVerifyEmailRequest {
  email: string;
}

export interface VerifyCodeRequest {
  verifyCode: string;
}

export interface VerifyExistedPasswordRequest {
  password: string;
}

export interface UserTokenDto {
  accessToken: string;
  refreshToken: string;
}

export interface ApplyToJoinGroupResponse {
  groupId?: string;
  groupName?: string;
  success: boolean;
}

export interface CreateGroupInfoRequest {
  groupId: string;
  infoId: string;
  message?: string;
}

export interface CreateGroupInfoListRequest {
  groupInfoList: CreateGroupInfoRequest[];
}

export interface CreateGroupInviteLinkResponse {
  inviteKey: string;
}

export type CreateGroupResponseIcon = typeof CreateGroupResponseIcon[keyof typeof CreateGroupResponseIcon];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateGroupResponseIcon = {
  LOCK: 'LOCK',
  ARROW: 'ARROW',
  LETTER: 'LETTER',
  HEART: 'HEART',
  FOOTPRINT: 'FOOTPRINT',
  WINE_GLASS: 'WINE_GLASS',
  EGG: 'EGG',
  BOUQUET: 'BOUQUET',
  RING: 'RING',
  STAR: 'STAR',
} as const;

export interface CreateGroupResponse {
  groupId: string;
  icon: CreateGroupResponseIcon;
  name: string;
}

export type CreateGroupRequestIcon = typeof CreateGroupRequestIcon[keyof typeof CreateGroupRequestIcon];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateGroupRequestIcon = {
  LOCK: 'LOCK',
  ARROW: 'ARROW',
  LETTER: 'LETTER',
  HEART: 'HEART',
  FOOTPRINT: 'FOOTPRINT',
  WINE_GLASS: 'WINE_GLASS',
  EGG: 'EGG',
  BOUQUET: 'BOUQUET',
  RING: 'RING',
  STAR: 'STAR',
} as const;

export interface CreateGroupRequest {
  icon: CreateGroupRequestIcon;
  name: string;
}

export interface ImageDto {
  imageId: string;
  url: string;
}

export type UserInfoRequestMbti = typeof UserInfoRequestMbti[keyof typeof UserInfoRequestMbti];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UserInfoRequestMbti = {
  ENFP: 'ENFP',
  ENFJ: 'ENFJ',
  ENTJ: 'ENTJ',
  ENTP: 'ENTP',
  ESFJ: 'ESFJ',
  ESFP: 'ESFP',
  ESTJ: 'ESTJ',
  ESTP: 'ESTP',
  INFJ: 'INFJ',
  INFP: 'INFP',
  INTJ: 'INTJ',
  INTP: 'INTP',
  ISFJ: 'ISFJ',
  ISFP: 'ISFP',
  ISTJ: 'ISTJ',
  ISTP: 'ISTP',
} as const;

export type UserInfoRequestGender = typeof UserInfoRequestGender[keyof typeof UserInfoRequestGender];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UserInfoRequestGender = {
  MALE: 'MALE',
  FEMALE: 'FEMALE',
} as const;

export type IdealPartnerRequestLocation = typeof IdealPartnerRequestLocation[keyof typeof IdealPartnerRequestLocation];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const IdealPartnerRequestLocation = {
  IMPORTANT: 'IMPORTANT',
  NOT_IMPORTANT: 'NOT_IMPORTANT',
} as const;

export type IdealPartnerRequestHobbies = typeof IdealPartnerRequestHobbies[keyof typeof IdealPartnerRequestHobbies];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const IdealPartnerRequestHobbies = {
  IMPORTANT: 'IMPORTANT',
  NOT_IMPORTANT: 'NOT_IMPORTANT',
} as const;

export interface IdealPartnerRequest {
  ageRange?: NumberRange;
  drinking: IdealPartnerDrinking;
  heightRange?: NumberRange;
  hobbies: IdealPartnerRequestHobbies;
  images?: InfoImage[];
  location?: IdealPartnerRequestLocation;
  religion: Religion;
  requiredOptions: string[];
  smoking: IdealPartnerSmoking;
  style?: string;
  toMatchMaker: string;
}

export interface SaveInfoRequest {
  idealPartner?: IdealPartnerRequest;
  userInfo: UserInfoRequest;
}

export interface SaveSharingResponse {
  sharingId: string;
}

export interface UpdateReceiveEmailRequest {
  receiveEmail: boolean;
}

export interface UpdateEmailRequest {
  email: string;
}

export interface UpdateNameRequest {
  name: string;
}

export interface UpdatePasswordRequest {
  email: string;
  password: string;
  token?: string;
}

export interface UpdateProfileImageRequest {
  profileImage: string;
}

export interface UpdateGroupInfoCommentRequest {
  message?: string;
}

export interface ManageInvitationResponse {
  groupId?: string;
  groupName?: string;
  memberName?: string;
  success: boolean;
}

export type ManageInvitationRequestAction = typeof ManageInvitationRequestAction[keyof typeof ManageInvitationRequestAction];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ManageInvitationRequestAction = {
  APPROVE: 'APPROVE',
  REJECT: 'REJECT',
  KICK: 'KICK',
  LEAVE: 'LEAVE',
} as const;

export interface ManageInvitationRequest {
  action: ManageInvitationRequestAction;
}

export type UpdateGroupResponseIcon = typeof UpdateGroupResponseIcon[keyof typeof UpdateGroupResponseIcon];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateGroupResponseIcon = {
  LOCK: 'LOCK',
  ARROW: 'ARROW',
  LETTER: 'LETTER',
  HEART: 'HEART',
  FOOTPRINT: 'FOOTPRINT',
  WINE_GLASS: 'WINE_GLASS',
  EGG: 'EGG',
  BOUQUET: 'BOUQUET',
  RING: 'RING',
  STAR: 'STAR',
} as const;

export interface UpdateGroupResponse {
  groupId: string;
  icon: UpdateGroupResponseIcon;
  name: string;
}

export type UpdateGroupRequestIcon = typeof UpdateGroupRequestIcon[keyof typeof UpdateGroupRequestIcon];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateGroupRequestIcon = {
  LOCK: 'LOCK',
  ARROW: 'ARROW',
  LETTER: 'LETTER',
  HEART: 'HEART',
  FOOTPRINT: 'FOOTPRINT',
  WINE_GLASS: 'WINE_GLASS',
  EGG: 'EGG',
  BOUQUET: 'BOUQUET',
  RING: 'RING',
  STAR: 'STAR',
} as const;

export interface UpdateGroupRequest {
  icon: UpdateGroupRequestIcon;
  name: string;
}

export type UserInfoSmokingSmokingCategory = typeof UserInfoSmokingSmokingCategory[keyof typeof UserInfoSmokingSmokingCategory];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UserInfoSmokingSmokingCategory = {
  NON_SMOKER: 'NON_SMOKER',
  SMOKER: 'SMOKER',
  ETC: 'ETC',
} as const;

export interface UserInfoSmoking {
  smokingAmount?: string;
  smokingCategory: UserInfoSmokingSmokingCategory;
}

export type UserInfoLocationTownsItem = typeof UserInfoLocationTownsItem[keyof typeof UserInfoLocationTownsItem];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UserInfoLocationTownsItem = {
  GANGNAM: 'GANGNAM',
  GANGDONG: 'GANGDONG',
  GANGBUK: 'GANGBUK',
  GANGSEO: 'GANGSEO',
  GWANAK: 'GWANAK',
  GWANGJIN: 'GWANGJIN',
  GURO: 'GURO',
  GEUMCHEON: 'GEUMCHEON',
  NOWON: 'NOWON',
  DOBONG: 'DOBONG',
  DONGDAEMUN: 'DONGDAEMUN',
  DONGJAK: 'DONGJAK',
  MAPO: 'MAPO',
  SEODAEMUN: 'SEODAEMUN',
  SEOCHO: 'SEOCHO',
  SEONGDONG: 'SEONGDONG',
  SEONGBUK: 'SEONGBUK',
  SONGPA: 'SONGPA',
  YANGCHEON: 'YANGCHEON',
  YEONGDEUNGPO: 'YEONGDEUNGPO',
  YONGSAN: 'YONGSAN',
  EUNPYEONG: 'EUNPYEONG',
  JONGNO: 'JONGNO',
  SEOUL_JUNG: 'SEOUL_JUNG',
  JUNGRANG: 'JUNGRANG',
  GAPYEONG: 'GAPYEONG',
  GOYANG: 'GOYANG',
  GWACHEON: 'GWACHEON',
  GWANGMYEONG: 'GWANGMYEONG',
  GWANGJU: 'GWANGJU',
  GURI: 'GURI',
  GUNPO: 'GUNPO',
  GIMPO: 'GIMPO',
  NAMYANGJU: 'NAMYANGJU',
  DONGDUCHEON: 'DONGDUCHEON',
  BUCHEON: 'BUCHEON',
  SEONGNAM: 'SEONGNAM',
  SUWON: 'SUWON',
  SIHEUNG: 'SIHEUNG',
  ANSAN: 'ANSAN',
  ANSEONG: 'ANSEONG',
  ANYANG: 'ANYANG',
  YANGJU: 'YANGJU',
  YANGPYEONG: 'YANGPYEONG',
  YEOJU: 'YEOJU',
  YEONCHEON: 'YEONCHEON',
  OSAN: 'OSAN',
  YONGIN: 'YONGIN',
  UIWANG: 'UIWANG',
  UIJEONGBU: 'UIJEONGBU',
  ICHEON: 'ICHEON',
  PAJU: 'PAJU',
  PYEONGTAEK: 'PYEONGTAEK',
  POCHEON: 'POCHEON',
  HANAM: 'HANAM',
  HWASEONG: 'HWASEONG',
  GANGHWA: 'GANGHWA',
  GYEYANG: 'GYEYANG',
  NAMDONG: 'NAMDONG',
  INCHEON_DONG: 'INCHEON_DONG',
  MICHUHOL: 'MICHUHOL',
  BUPYEONG: 'BUPYEONG',
  SEO: 'SEO',
  YEONSU: 'YEONSU',
  ONGJIN: 'ONGJIN',
  INCHEON_JUNG: 'INCHEON_JUNG',
  DAEDEOK: 'DAEDEOK',
  DAEJEON_DONG: 'DAEJEON_DONG',
  DAEJEON_SEO: 'DAEJEON_SEO',
  YUSEONG: 'YUSEONG',
  DAEJEON_JUNG: 'DAEJEON_JUNG',
  BUSAN_GANGSEO: 'BUSAN_GANGSEO',
  GEUMJEONG: 'GEUMJEONG',
  GIJANG: 'GIJANG',
  BUSAN_NAM: 'BUSAN_NAM',
  BUSAN_DONG: 'BUSAN_DONG',
  DONGNAE: 'DONGNAE',
  BUSANJIN: 'BUSANJIN',
  BUSAN_BUK: 'BUSAN_BUK',
  SASANG: 'SASANG',
  SAHA: 'SAHA',
  BUSAN_SEO: 'BUSAN_SEO',
  SUYEONG: 'SUYEONG',
  YEONJE: 'YEONJE',
  YEONGDO: 'YEONGDO',
  BUSAN_JUNG: 'BUSAN_JUNG',
  HAEUNDAE: 'HAEUNDAE',
  ULSAN_NAM: 'ULSAN_NAM',
  ULSAN_DONG: 'ULSAN_DONG',
  ULSAN_BUK: 'ULSAN_BUK',
  ULJU: 'ULJU',
  ULSAN_JUNG: 'ULSAN_JUNG',
  GWANGSAN: 'GWANGSAN',
  GWANGJU_NAM: 'GWANGJU_NAM',
  GWANGJU_DONG: 'GWANGJU_DONG',
  GWANGJU_BUK: 'GWANGJU_BUK',
  GWANGJU_SEO: 'GWANGJU_SEO',
  GANGNEUNG: 'GANGNEUNG',
  GOSEONG: 'GOSEONG',
  DONGHAE: 'DONGHAE',
  SAMCHEOK: 'SAMCHEOK',
  SOKCHO: 'SOKCHO',
  YANGGU: 'YANGGU',
  YANGYANG: 'YANGYANG',
  YEONGWOL: 'YEONGWOL',
  WONJU: 'WONJU',
  INJE: 'INJE',
  JEONGSEON: 'JEONGSEON',
  CHEORWON: 'CHEORWON',
  CHUNCHEON: 'CHUNCHEON',
  TAEBAEK: 'TAEBAEK',
  PYEONGCHANG: 'PYEONGCHANG',
  HONGCHEON: 'HONGCHEON',
  HWACHEON: 'HWACHEON',
  HOENGSEONG: 'HOENGSEONG',
  SEJONG: 'SEJONG',
  GOESAN: 'GOESAN',
  DANYANG: 'DANYANG',
  BOEUN: 'BOEUN',
  YEONGDONG: 'YEONGDONG',
  OKCHEON: 'OKCHEON',
  EUMSEONG: 'EUMSEONG',
  JECHEON: 'JECHEON',
  JEUNGPYEONG: 'JEUNGPYEONG',
  JINCHEON: 'JINCHEON',
  CHEONGJU: 'CHEONGJU',
  CHUNGJU: 'CHUNGJU',
  GYERYONG: 'GYERYONG',
  GONGJU: 'GONGJU',
  GEUMSAN: 'GEUMSAN',
  NONSAN: 'NONSAN',
  DANGJIN: 'DANGJIN',
  BORYEONG: 'BORYEONG',
  BUYEO: 'BUYEO',
  SEOSAN: 'SEOSAN',
  SEOCHON: 'SEOCHON',
  ASAN: 'ASAN',
  YEONGI: 'YEONGI',
  YESAN: 'YESAN',
  CHEONAN: 'CHEONAN',
  CHEONGYANG: 'CHEONGYANG',
  TAEAN: 'TAEAN',
  HONGSEONG: 'HONGSEONG',
  GYEONGSAN: 'GYEONGSAN',
  GYEONGJU: 'GYEONGJU',
  GORYEONG: 'GORYEONG',
  GUMI: 'GUMI',
  GIMCHEON: 'GIMCHEON',
  MUNGYEONG: 'MUNGYEONG',
  BONGHWA: 'BONGHWA',
  SANGJU: 'SANGJU',
  SEONGJU: 'SEONGJU',
  ANDONG: 'ANDONG',
  YEONGDEOK: 'YEONGDEOK',
  YEONGYANG: 'YEONGYANG',
  YEONGJU: 'YEONGJU',
  YEONGCHEON: 'YEONGCHEON',
  YECHUN: 'YECHUN',
  ULLUNG: 'ULLUNG',
  ULJIN: 'ULJIN',
  UISEONG: 'UISEONG',
  CHEONGDO: 'CHEONGDO',
  CHEONGSONG: 'CHEONGSONG',
  CHILGOK: 'CHILGOK',
  POHANG: 'POHANG',
  GEOJE: 'GEOJE',
  GEOCHANG: 'GEOCHANG',
  GOSEONG_GN: 'GOSEONG_GN',
  GIMHAE: 'GIMHAE',
  NAMHAE: 'NAMHAE',
  MIRYANG: 'MIRYANG',
  SACHEON: 'SACHEON',
  SANCHEONG: 'SANCHEONG',
  YANGSAN: 'YANGSAN',
  UIRYEONG: 'UIRYEONG',
  JINJU: 'JINJU',
  CHANGNYEONG: 'CHANGNYEONG',
  CHANGWON: 'CHANGWON',
  TONGYEONG: 'TONGYEONG',
  HADONG: 'HADONG',
  HAMAN: 'HAMAN',
  HAMYANG: 'HAMYANG',
  HAPCHEON: 'HAPCHEON',
  GOCHANG: 'GOCHANG',
  GUNSAN: 'GUNSAN',
  GIMJE: 'GIMJE',
  NAMWON: 'NAMWON',
  MUJU: 'MUJU',
  BUAN: 'BUAN',
  SUNCHANG: 'SUNCHANG',
  WANJU: 'WANJU',
  IKSAN: 'IKSAN',
  IMSIL: 'IMSIL',
  JANGSU: 'JANGSU',
  JEONJU: 'JEONJU',
  JEONGEUP: 'JEONGEUP',
  JINAN: 'JINAN',
  GANGJIN: 'GANGJIN',
  GOHEUNG: 'GOHEUNG',
  GOKSEONG: 'GOKSEONG',
  GWANGYANG: 'GWANGYANG',
  GURYE: 'GURYE',
  NAJU: 'NAJU',
  DAMYANG: 'DAMYANG',
  MOKPO: 'MOKPO',
  MUAN: 'MUAN',
  BOSEONG: 'BOSEONG',
  SUNCHEON: 'SUNCHEON',
  SINAN: 'SINAN',
  YEOSU: 'YEOSU',
  YEONGGWANG: 'YEONGGWANG',
  YEONGAM: 'YEONGAM',
  WANDO: 'WANDO',
  JANGSEONG: 'JANGSEONG',
  JANGHEUNG: 'JANGHEUNG',
  JINDO: 'JINDO',
  HAMPYEONG: 'HAMPYEONG',
  HAENAM: 'HAENAM',
  HWASUN: 'HWASUN',
  JEJU: 'JEJU',
  SEOGWIPO: 'SEOGWIPO',
  GUNWEE: 'GUNWEE',
  DAEGU_NAM: 'DAEGU_NAM',
  DALSEO: 'DALSEO',
  DALSEONG: 'DALSEONG',
  DAEGU_DONG: 'DAEGU_DONG',
  DAEGU_BUK: 'DAEGU_BUK',
  DAEGU_SEO: 'DAEGU_SEO',
  SUSEONG: 'SUSEONG',
  DAEGU_JUNG: 'DAEGU_JUNG',
} as const;

export type UserInfoLocationCitiesItem = typeof UserInfoLocationCitiesItem[keyof typeof UserInfoLocationCitiesItem];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UserInfoLocationCitiesItem = {
  SEOUL: 'SEOUL',
  GYEONGGI: 'GYEONGGI',
  INCHEON: 'INCHEON',
  DAEJEON: 'DAEJEON',
  DAEGU: 'DAEGU',
  BUSAN: 'BUSAN',
  ULSAN: 'ULSAN',
  GWANGJU: 'GWANGJU',
  GANGWON: 'GANGWON',
  SEJONG: 'SEJONG',
  CHUNGCHEONGNAM: 'CHUNGCHEONGNAM',
  CHUNGCHEONGBUK: 'CHUNGCHEONGBUK',
  GYEONGSANGNAM: 'GYEONGSANGNAM',
  GYEONGSANGBUK: 'GYEONGSANGBUK',
  JEOLANAM: 'JEOLANAM',
  JEOLABUK: 'JEOLABUK',
  JEJU: 'JEJU',
} as const;

export interface UserInfoLocation {
  cities: UserInfoLocationCitiesItem[];
  towns: UserInfoLocationTownsItem[];
}

export type UserInfoDrinkingDrinkingCategory = typeof UserInfoDrinkingDrinkingCategory[keyof typeof UserInfoDrinkingDrinkingCategory];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UserInfoDrinkingDrinkingCategory = {
  NON_DRINKER: 'NON_DRINKER',
  DRINKER: 'DRINKER',
} as const;

export interface UserInfoDrinking {
  drinkingAmount?: string;
  drinkingCategory: UserInfoDrinkingDrinkingCategory;
}

export type ReligionReligionCategory = typeof ReligionReligionCategory[keyof typeof ReligionReligionCategory];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ReligionReligionCategory = {
  CHRISTIANITY: 'CHRISTIANITY',
  CATHOLICISM: 'CATHOLICISM',
  BUDDHISM: 'BUDDHISM',
  IRRELIGION: 'IRRELIGION',
  ETC: 'ETC',
} as const;

export interface Religion {
  religionCategory: ReligionReligionCategory;
  religionName?: string;
}

export interface NumberRange {
  max: number;
  min: number;
}

export interface Movie {
  cause: string;
  movieName: string;
}

export interface UserInfoRequest {
  birthDate: string;
  book?: Book;
  dateStyle?: string[];
  drinking: UserInfoDrinking;
  foods?: string[];
  gender: UserInfoRequestGender;
  height: number;
  hobbies: string[];
  images: InfoImage[];
  introduction?: string;
  job: Job;
  location: UserInfoLocation;
  mbti?: UserInfoRequestMbti;
  movie?: Movie;
  name: string;
  pets?: string[];
  religion: Religion;
  smoking: UserInfoSmoking;
}

export type JobJobCategory = typeof JobJobCategory[keyof typeof JobJobCategory];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const JobJobCategory = {
  STUDENT: 'STUDENT',
  EMPLOYEE: 'EMPLOYEE',
  FREELANCER: 'FREELANCER',
  ETC: 'ETC',
} as const;

export interface Job {
  jobCategory: JobJobCategory;
  jobName: string;
}

export interface InfoImage {
  imageId: string;
  url: string;
}

export type IdealPartnerSmokingSmokingCategory = typeof IdealPartnerSmokingSmokingCategory[keyof typeof IdealPartnerSmokingSmokingCategory];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const IdealPartnerSmokingSmokingCategory = {
  DOESNT_MATTER: 'DOESNT_MATTER',
  NEVER: 'NEVER',
  GOOD: 'GOOD',
  ETC: 'ETC',
} as const;

export interface IdealPartnerSmoking {
  smokingAmount?: string;
  smokingCategory: IdealPartnerSmokingSmokingCategory;
}

export type IdealPartnerDrinkingDrinkingCategory = typeof IdealPartnerDrinkingDrinkingCategory[keyof typeof IdealPartnerDrinkingDrinkingCategory];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const IdealPartnerDrinkingDrinkingCategory = {
  NO_PROBLEM: 'NO_PROBLEM',
  ONE_TWO_TIMES_A_WEEK: 'ONE_TWO_TIMES_A_WEEK',
  ONE_TWO_TIMES_A_MONTH: 'ONE_TWO_TIMES_A_MONTH',
  NEVER: 'NEVER',
  ETC: 'ETC',
} as const;

export interface IdealPartnerDrinking {
  drinkingAmount?: string;
  drinkingCategory: IdealPartnerDrinkingDrinkingCategory;
}

export type DetailedInfoUserInfoMbti = typeof DetailedInfoUserInfoMbti[keyof typeof DetailedInfoUserInfoMbti];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DetailedInfoUserInfoMbti = {
  ENFP: 'ENFP',
  ENFJ: 'ENFJ',
  ENTJ: 'ENTJ',
  ENTP: 'ENTP',
  ESFJ: 'ESFJ',
  ESFP: 'ESFP',
  ESTJ: 'ESTJ',
  ESTP: 'ESTP',
  INFJ: 'INFJ',
  INFP: 'INFP',
  INTJ: 'INTJ',
  INTP: 'INTP',
  ISFJ: 'ISFJ',
  ISFP: 'ISFP',
  ISTJ: 'ISTJ',
  ISTP: 'ISTP',
} as const;

export type DetailedInfoUserInfoGender = typeof DetailedInfoUserInfoGender[keyof typeof DetailedInfoUserInfoGender];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DetailedInfoUserInfoGender = {
  MALE: 'MALE',
  FEMALE: 'FEMALE',
} as const;

export interface DetailedInfoUserInfo {
  birthDate: string;
  book?: Book;
  dateStyle?: string[];
  drinking: UserInfoDrinking;
  foods?: string[];
  gender: DetailedInfoUserInfoGender;
  height: number;
  hobbies: string[];
  images: InfoImage[];
  introduction?: string;
  job: Job;
  location: UserInfoLocation;
  mbti?: DetailedInfoUserInfoMbti;
  movie?: Movie;
  name: string;
  pets?: string[];
  religion: Religion;
  smoking: UserInfoSmoking;
}

export type DetailedInfoIdealPartnerLocation = typeof DetailedInfoIdealPartnerLocation[keyof typeof DetailedInfoIdealPartnerLocation];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DetailedInfoIdealPartnerLocation = {
  IMPORTANT: 'IMPORTANT',
  NOT_IMPORTANT: 'NOT_IMPORTANT',
} as const;

export type DetailedInfoIdealPartnerHobbies = typeof DetailedInfoIdealPartnerHobbies[keyof typeof DetailedInfoIdealPartnerHobbies];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DetailedInfoIdealPartnerHobbies = {
  IMPORTANT: 'IMPORTANT',
  NOT_IMPORTANT: 'NOT_IMPORTANT',
} as const;

export interface DetailedInfoIdealPartner {
  ageRange?: NumberRange;
  drinking: IdealPartnerDrinking;
  heightRange?: NumberRange;
  hobbies: DetailedInfoIdealPartnerHobbies;
  images?: InfoImage[];
  location?: DetailedInfoIdealPartnerLocation;
  religion: Religion;
  requiredOptions: string[];
  smoking: IdealPartnerSmoking;
  style?: string;
  toMatchMaker: string;
}

export interface DetailedInfoDto {
  id: string;
  idealPartner?: DetailedInfoIdealPartner;
  userInfo: DetailedInfoUserInfo;
}

export interface Book {
  bookName: string;
  cause: string;
}

export interface CreateLinkResponse {
  isOpen: boolean;
  linkId: string;
  linkKey: string;
}

export interface Unit { [key: string]: unknown }

export interface UpdateLinkOpenRequest {
  isOpen: boolean;
  linkId: string;
}




type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


  export const updateLinkOpen = (
    updateLinkOpenRequest: UpdateLinkOpenRequest,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<Unit>(
      {url: `/api/v1/link/link-open`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: updateLinkOpenRequest
    },
      options);
    }
  
export const regenerateLinkKey = (
    
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<CreateLinkResponse>(
      {url: `/api/v1/link/key`, method: 'PUT'
    },
      options);
    }
  
export const updateInfo = (
    detailedInfoDto: DetailedInfoDto,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<string>(
      {url: `/api/v1/info`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: detailedInfoDto
    },
      options);
    }
  
export const updateGroup = (
    groupId: string,
    updateGroupRequest: UpdateGroupRequest,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<UpdateGroupResponse>(
      {url: `/api/v1/groups/${groupId}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: updateGroupRequest
    },
      options);
    }
  
export const deleteGroup = (
    groupId: string,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<Unit>(
      {url: `/api/v1/groups/${groupId}`, method: 'DELETE'
    },
      options);
    }
  
export const manageMember = (
    groupId: string,
    memberId: string,
    manageInvitationRequest: ManageInvitationRequest,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<ManageInvitationResponse>(
      {url: `/api/v1/groups/${groupId}/members/${memberId}/manage`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: manageInvitationRequest
    },
      options);
    }
  
export const updateGroupInfoComment = (
    groupId: string,
    infoId: string,
    updateGroupInfoCommentRequest: UpdateGroupInfoCommentRequest,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<Unit>(
      {url: `/api/v1/groups/${groupId}/group-infos/${infoId}/comment`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: updateGroupInfoCommentRequest
    },
      options);
    }
  
export const updateProfileImage = (
    updateProfileImageRequest: UpdateProfileImageRequest,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<boolean>(
      {url: `/api/v1/auth/profile-image`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: updateProfileImageRequest
    },
      options);
    }
  
export const updatePassword = (
    updatePasswordRequest: UpdatePasswordRequest,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<boolean>(
      {url: `/api/v1/auth/password`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: updatePasswordRequest
    },
      options);
    }
  
export const updateName = (
    updateNameRequest: UpdateNameRequest,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<boolean>(
      {url: `/api/v1/auth/name`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: updateNameRequest
    },
      options);
    }
  
export const updateEmail = (
    updateEmailRequest: UpdateEmailRequest,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<boolean>(
      {url: `/api/v1/auth/email`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: updateEmailRequest
    },
      options);
    }
  
export const updateReceiveEmail = (
    updateReceiveEmailRequest: UpdateReceiveEmailRequest,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<boolean>(
      {url: `/api/v1/auth/email/receive`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: updateReceiveEmailRequest
    },
      options);
    }
  
export const saveSharing = (
    infoId: string,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<SaveSharingResponse>(
      {url: `/api/v1/sharing/${infoId}`, method: 'POST'
    },
      options);
    }
  
export const saveSharingWithGroup = (
    groupId: string,
    infoId: string,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<SaveSharingResponse>(
      {url: `/api/v1/sharing/groups/${groupId}/infos/${infoId}`, method: 'POST'
    },
      options);
    }
  
export const createLink = (
    
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<CreateLinkResponse>(
      {url: `/api/v1/link`, method: 'POST'
    },
      options);
    }
  
export const saveInfo = (
    saveInfoRequest: SaveInfoRequest,
    params: SaveInfoParams,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<string>(
      {url: `/api/v1/info/save`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: saveInfoRequest,
        params
    },
      options);
    }
  
export const uploadImage = (
    uploadImageBody: UploadImageBody,
 options?: SecondParameter<typeof customInstance>,) => {const formData = new FormData();
formData.append('image', uploadImageBody.image)

      return customInstance<ImageDto>(
      {url: `/api/v1/image/upload`, method: 'POST',
      headers: {'Content-Type': 'multipart/form-data', },
       data: formData
    },
      options);
    }
  
export const getMyGroups = (
    
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<GroupInfoResponse[]>(
      {url: `/api/v1/groups`, method: 'GET'
    },
      options);
    }
  
export const createGroup = (
    createGroupRequest: CreateGroupRequest,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<CreateGroupResponse>(
      {url: `/api/v1/groups`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createGroupRequest
    },
      options);
    }
  
export const createGroupInviteLink = (
    groupId: string,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<CreateGroupInviteLinkResponse>(
      {url: `/api/v1/groups/${groupId}/invite-link`, method: 'POST'
    },
      options);
    }
  
export const createGroupInfoList = (
    createGroupInfoListRequest: CreateGroupInfoListRequest,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<Unit>(
      {url: `/api/v1/groups/group-infos`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createGroupInfoListRequest
    },
      options);
    }
  
export const applyToJoinGroup = (
    params: ApplyToJoinGroupParams,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<ApplyToJoinGroupResponse>(
      {url: `/api/v1/groups/apply`, method: 'POST',
        params
    },
      options);
    }
  
export const refreshToken = (
    userTokenDto: UserTokenDto,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<UserTokenDto>(
      {url: `/api/v1/auth/refresh-token`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: userTokenDto
    },
      options);
    }
  
export const verifyExistedPassword = (
    verifyExistedPasswordRequest: VerifyExistedPasswordRequest,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<boolean>(
      {url: `/api/v1/auth/password/verify`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: verifyExistedPasswordRequest
    },
      options);
    }
  
export const logout = (
    
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<Unit>(
      {url: `/api/v1/auth/logout`, method: 'POST'
    },
      options);
    }
  
export const verifyEmailVerifyCode = (
    verifyCodeRequest: VerifyCodeRequest,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<boolean>(
      {url: `/api/v1/auth/email/verify-code/verify`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: verifyCodeRequest
    },
      options);
    }
  
export const sendEmailVerifyCode = (
    sendVerifyEmailRequest: SendVerifyEmailRequest,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<boolean>(
      {url: `/api/v1/auth/email/verify-code/send`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: sendVerifyEmailRequest
    },
      options);
    }
  
export const signup = (
    signupRequest: SignupRequest,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<UserTokenDto>(
      {url: `/api/v1/auth/email/signup`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: signupRequest
    },
      options);
    }
  
/**
 * @deprecated
 */
export const verifyEmailSignup = (
    verifyCommonVerificationMailRequest: VerifyCommonVerificationMailRequest,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<boolean>(
      {url: `/api/v1/auth/email/signup/verify-code/verify`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: verifyCommonVerificationMailRequest
    },
      options);
    }
  
export const optOutEmail = (
    
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<boolean>(
      {url: `/api/v1/auth/email/opt-out`, method: 'POST'
    },
      options);
    }
  
export const login = (
    emailLoginRequest: EmailLoginRequest,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<UserTokenDto>(
      {url: `/api/v1/auth/email/login`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: emailLoginRequest
    },
      options);
    }
  
export const verifyCommonVerificationMail = (
    verifyCommonVerificationMailRequest: VerifyCommonVerificationMailRequest,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<VerificationResultDto>(
      {url: `/api/v1/auth/email/common/verify-code/verify`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: verifyCommonVerificationMailRequest
    },
      options);
    }
  
export const sendCommonVerificationMail = (
    sendCommonVerificationMailRequest: SendCommonVerificationMailRequest,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<boolean>(
      {url: `/api/v1/auth/email/common/verify-code/send`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: sendCommonVerificationMailRequest
    },
      options);
    }
  
export const health = (
    
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<string>(
      {url: `/health`, method: 'GET'
    },
      options);
    }
  
export const log = (
    
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<string>(
      {url: `/health/log`, method: 'GET'
    },
      options);
    }
  
export const getInfoBySharingId = (
    sharingId: string,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<InfoToShareResponse>(
      {url: `/api/v1/sharing/public/${sharingId}`, method: 'GET'
    },
      options);
    }
  
export const validateLink = (
    linkKey: string,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<ValidateLinkResponse>(
      {url: `/api/v1/link/valid/${linkKey}`, method: 'GET'
    },
      options);
    }
  
export const getLinkByMatchMakerId = (
    
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<LinkStatusResponse>(
      {url: `/api/v1/link/status`, method: 'GET'
    },
      options);
    }
  
export const getMatchMakerName = (
    linkKey: string,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<string>(
      {url: `/api/v1/link/match-maker/${linkKey}`, method: 'GET'
    },
      options);
    }
  
export const searchInfo = (
    params: SearchInfoParams,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<SearchInfoResponse>(
      {url: `/api/v1/info/search`, method: 'GET',
        params
    },
      options);
    }
  
export const getInfo = (
    id: string,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<DetailedInfoDto>(
      {url: `/api/v1/info/detail/${id}`, method: 'GET'
    },
      options);
    }
  
export const getAllInfo = (
    
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<ArchivedInfoResponse[]>(
      {url: `/api/v1/info/all`, method: 'GET'
    },
      options);
    }
  
export const getAddress = (
    
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<CityAndTownResponse[]>(
      {url: `/api/v1/info/address`, method: 'GET'
    },
      options);
    }
  
export const searchGroupInfo = (
    groupId: string,
    params: SearchGroupInfoParams,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<SearchGroupInfoResponse>(
      {url: `/api/v1/groups/${groupId}/search`, method: 'GET',
        params
    },
      options);
    }
  
export const getGroupMembers = (
    groupId: string,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<GroupMemberResponse[]>(
      {url: `/api/v1/groups/${groupId}/members`, method: 'GET'
    },
      options);
    }
  
export const getGroupInfo = (
    groupId: string,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<GroupInfoResponse>(
      {url: `/api/v1/groups/${groupId}/info`, method: 'GET'
    },
      options);
    }
  
export const getGroupHistory = (
    groupId: string,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<GroupHistoryResponse[]>(
      {url: `/api/v1/groups/${groupId}/history`, method: 'GET'
    },
      options);
    }
  
export const getGroupInfoDetail = (
    groupId: string,
    infoId: string,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<GroupInfoDetailResponse>(
      {url: `/api/v1/groups/${groupId}/group-infos/${infoId}`, method: 'GET'
    },
      options);
    }
  
export const deleteGroupInfo = (
    groupId: string,
    infoId: string,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<Unit>(
      {url: `/api/v1/groups/${groupId}/group-infos/${infoId}`, method: 'DELETE'
    },
      options);
    }
  
export const getAvailableCandidates = (
    groupId: string,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<AvailableCandidateResponse[]>(
      {url: `/api/v1/groups/${groupId}/candidates`, method: 'GET'
    },
      options);
    }
  
export const getGroupInfoByInviteKey = (
    inviteKey: string,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<ValidateGroupInviteLinkResponse>(
      {url: `/api/v1/groups/invite/${inviteKey}`, method: 'GET'
    },
      options);
    }
  
export const loginKakao = (
    params: LoginKakaoParams,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<UserTokenDto>(
      {url: `/api/v1/auth/kakao/login`, method: 'GET',
        params
    },
      options);
    }
  
export const info = (
    
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<UserInfoResponse>(
      {url: `/api/v1/auth/info`, method: 'GET'
    },
      options);
    }
  
export const getUserEnrollmentStatus = (
    
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<UserEnrollmentStatusResponse>(
      {url: `/api/v1/auth/enrollment-status`, method: 'GET'
    },
      options);
    }
  
export const deleteInfo = (
    id: string,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<string>(
      {url: `/api/v1/info/${id}`, method: 'DELETE'
    },
      options);
    }
  
export const quit = (
    
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<Unit>(
      {url: `/api/v1/auth/quit`, method: 'DELETE'
    },
      options);
    }
  
export type UpdateLinkOpenResult = NonNullable<Awaited<ReturnType<typeof updateLinkOpen>>>
export type RegenerateLinkKeyResult = NonNullable<Awaited<ReturnType<typeof regenerateLinkKey>>>
export type UpdateInfoResult = NonNullable<Awaited<ReturnType<typeof updateInfo>>>
export type UpdateGroupResult = NonNullable<Awaited<ReturnType<typeof updateGroup>>>
export type DeleteGroupResult = NonNullable<Awaited<ReturnType<typeof deleteGroup>>>
export type ManageMemberResult = NonNullable<Awaited<ReturnType<typeof manageMember>>>
export type UpdateGroupInfoCommentResult = NonNullable<Awaited<ReturnType<typeof updateGroupInfoComment>>>
export type UpdateProfileImageResult = NonNullable<Awaited<ReturnType<typeof updateProfileImage>>>
export type UpdatePasswordResult = NonNullable<Awaited<ReturnType<typeof updatePassword>>>
export type UpdateNameResult = NonNullable<Awaited<ReturnType<typeof updateName>>>
export type UpdateEmailResult = NonNullable<Awaited<ReturnType<typeof updateEmail>>>
export type UpdateReceiveEmailResult = NonNullable<Awaited<ReturnType<typeof updateReceiveEmail>>>
export type SaveSharingResult = NonNullable<Awaited<ReturnType<typeof saveSharing>>>
export type SaveSharingWithGroupResult = NonNullable<Awaited<ReturnType<typeof saveSharingWithGroup>>>
export type CreateLinkResult = NonNullable<Awaited<ReturnType<typeof createLink>>>
export type SaveInfoResult = NonNullable<Awaited<ReturnType<typeof saveInfo>>>
export type UploadImageResult = NonNullable<Awaited<ReturnType<typeof uploadImage>>>
export type GetMyGroupsResult = NonNullable<Awaited<ReturnType<typeof getMyGroups>>>
export type CreateGroupResult = NonNullable<Awaited<ReturnType<typeof createGroup>>>
export type CreateGroupInviteLinkResult = NonNullable<Awaited<ReturnType<typeof createGroupInviteLink>>>
export type CreateGroupInfoListResult = NonNullable<Awaited<ReturnType<typeof createGroupInfoList>>>
export type ApplyToJoinGroupResult = NonNullable<Awaited<ReturnType<typeof applyToJoinGroup>>>
export type RefreshTokenResult = NonNullable<Awaited<ReturnType<typeof refreshToken>>>
export type VerifyExistedPasswordResult = NonNullable<Awaited<ReturnType<typeof verifyExistedPassword>>>
export type LogoutResult = NonNullable<Awaited<ReturnType<typeof logout>>>
export type VerifyEmailVerifyCodeResult = NonNullable<Awaited<ReturnType<typeof verifyEmailVerifyCode>>>
export type SendEmailVerifyCodeResult = NonNullable<Awaited<ReturnType<typeof sendEmailVerifyCode>>>
export type SignupResult = NonNullable<Awaited<ReturnType<typeof signup>>>
export type VerifyEmailSignupResult = NonNullable<Awaited<ReturnType<typeof verifyEmailSignup>>>
export type OptOutEmailResult = NonNullable<Awaited<ReturnType<typeof optOutEmail>>>
export type LoginResult = NonNullable<Awaited<ReturnType<typeof login>>>
export type VerifyCommonVerificationMailResult = NonNullable<Awaited<ReturnType<typeof verifyCommonVerificationMail>>>
export type SendCommonVerificationMailResult = NonNullable<Awaited<ReturnType<typeof sendCommonVerificationMail>>>
export type HealthResult = NonNullable<Awaited<ReturnType<typeof health>>>
export type LogResult = NonNullable<Awaited<ReturnType<typeof log>>>
export type GetInfoBySharingIdResult = NonNullable<Awaited<ReturnType<typeof getInfoBySharingId>>>
export type ValidateLinkResult = NonNullable<Awaited<ReturnType<typeof validateLink>>>
export type GetLinkByMatchMakerIdResult = NonNullable<Awaited<ReturnType<typeof getLinkByMatchMakerId>>>
export type GetMatchMakerNameResult = NonNullable<Awaited<ReturnType<typeof getMatchMakerName>>>
export type SearchInfoResult = NonNullable<Awaited<ReturnType<typeof searchInfo>>>
export type GetInfoResult = NonNullable<Awaited<ReturnType<typeof getInfo>>>
export type GetAllInfoResult = NonNullable<Awaited<ReturnType<typeof getAllInfo>>>
export type GetAddressResult = NonNullable<Awaited<ReturnType<typeof getAddress>>>
export type SearchGroupInfoResult = NonNullable<Awaited<ReturnType<typeof searchGroupInfo>>>
export type GetGroupMembersResult = NonNullable<Awaited<ReturnType<typeof getGroupMembers>>>
export type GetGroupInfoResult = NonNullable<Awaited<ReturnType<typeof getGroupInfo>>>
export type GetGroupHistoryResult = NonNullable<Awaited<ReturnType<typeof getGroupHistory>>>
export type GetGroupInfoDetailResult = NonNullable<Awaited<ReturnType<typeof getGroupInfoDetail>>>
export type DeleteGroupInfoResult = NonNullable<Awaited<ReturnType<typeof deleteGroupInfo>>>
export type GetAvailableCandidatesResult = NonNullable<Awaited<ReturnType<typeof getAvailableCandidates>>>
export type GetGroupInfoByInviteKeyResult = NonNullable<Awaited<ReturnType<typeof getGroupInfoByInviteKey>>>
export type LoginKakaoResult = NonNullable<Awaited<ReturnType<typeof loginKakao>>>
export type InfoResult = NonNullable<Awaited<ReturnType<typeof info>>>
export type GetUserEnrollmentStatusResult = NonNullable<Awaited<ReturnType<typeof getUserEnrollmentStatus>>>
export type DeleteInfoResult = NonNullable<Awaited<ReturnType<typeof deleteInfo>>>
export type QuitResult = NonNullable<Awaited<ReturnType<typeof quit>>>


export const getUpdateLinkOpenResponseMock = (): Unit => ({})

export const getRegenerateLinkKeyResponseMock = (overrideResponse: Partial< CreateLinkResponse > = {}): CreateLinkResponse => ({isOpen: faker.datatype.boolean(), linkId: faker.word.sample(), linkKey: faker.word.sample(), ...overrideResponse})

export const getUpdateInfoResponseMock = (): string => (faker.word.sample())

export const getUpdateGroupResponseMock = (overrideResponse: Partial< UpdateGroupResponse > = {}): UpdateGroupResponse => ({groupId: faker.word.sample(), icon: faker.helpers.arrayElement(['LOCK','ARROW','LETTER','HEART','FOOTPRINT','WINE_GLASS','EGG','BOUQUET','RING','STAR'] as const), name: faker.word.sample(), ...overrideResponse})

export const getDeleteGroupResponseMock = (): Unit => ({})

export const getManageMemberResponseMock = (overrideResponse: Partial< ManageInvitationResponse > = {}): ManageInvitationResponse => ({groupId: faker.helpers.arrayElement([faker.word.sample(), undefined]), groupName: faker.helpers.arrayElement([faker.word.sample(), undefined]), memberName: faker.helpers.arrayElement([faker.word.sample(), undefined]), success: faker.datatype.boolean(), ...overrideResponse})

export const getUpdateGroupInfoCommentResponseMock = (): Unit => ({})

export const getUpdateProfileImageResponseMock = (): boolean => (faker.datatype.boolean())

export const getUpdatePasswordResponseMock = (): boolean => (faker.datatype.boolean())

export const getUpdateNameResponseMock = (): boolean => (faker.datatype.boolean())

export const getUpdateEmailResponseMock = (): boolean => (faker.datatype.boolean())

export const getUpdateReceiveEmailResponseMock = (): boolean => (faker.datatype.boolean())

export const getSaveSharingResponseMock = (overrideResponse: Partial< SaveSharingResponse > = {}): SaveSharingResponse => ({sharingId: faker.word.sample(), ...overrideResponse})

export const getSaveSharingWithGroupResponseMock = (overrideResponse: Partial< SaveSharingResponse > = {}): SaveSharingResponse => ({sharingId: faker.word.sample(), ...overrideResponse})

export const getCreateLinkResponseMock = (overrideResponse: Partial< CreateLinkResponse > = {}): CreateLinkResponse => ({isOpen: faker.datatype.boolean(), linkId: faker.word.sample(), linkKey: faker.word.sample(), ...overrideResponse})

export const getSaveInfoResponseMock = (): string => (faker.word.sample())

export const getUploadImageResponseMock = (overrideResponse: Partial< ImageDto > = {}): ImageDto => ({imageId: faker.word.sample(), url: faker.word.sample(), ...overrideResponse})

export const getGetMyGroupsResponseMock = (): GroupInfoResponse[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({candidateCount: faker.number.int({min: undefined, max: undefined}), groupIcon: faker.helpers.arrayElement(['LOCK','ARROW','LETTER','HEART','FOOTPRINT','WINE_GLASS','EGG','BOUQUET','RING','STAR'] as const), groupId: faker.word.sample(), groupName: faker.word.sample(), memberCount: faker.number.int({min: undefined, max: undefined}), myStatus: faker.helpers.arrayElement(['ADMIN','MEMBER','PENDING'] as const), pendingCount: faker.number.int({min: undefined, max: undefined})})))

export const getCreateGroupResponseMock = (overrideResponse: Partial< CreateGroupResponse > = {}): CreateGroupResponse => ({groupId: faker.word.sample(), icon: faker.helpers.arrayElement(['LOCK','ARROW','LETTER','HEART','FOOTPRINT','WINE_GLASS','EGG','BOUQUET','RING','STAR'] as const), name: faker.word.sample(), ...overrideResponse})

export const getCreateGroupInviteLinkResponseMock = (overrideResponse: Partial< CreateGroupInviteLinkResponse > = {}): CreateGroupInviteLinkResponse => ({inviteKey: faker.word.sample(), ...overrideResponse})

export const getCreateGroupInfoListResponseMock = (): Unit => ({})

export const getApplyToJoinGroupResponseMock = (overrideResponse: Partial< ApplyToJoinGroupResponse > = {}): ApplyToJoinGroupResponse => ({groupId: faker.helpers.arrayElement([faker.word.sample(), undefined]), groupName: faker.helpers.arrayElement([faker.word.sample(), undefined]), success: faker.datatype.boolean(), ...overrideResponse})

export const getRefreshTokenResponseMock = (overrideResponse: Partial< UserTokenDto > = {}): UserTokenDto => ({accessToken: faker.word.sample(), refreshToken: faker.word.sample(), ...overrideResponse})

export const getVerifyExistedPasswordResponseMock = (): boolean => (faker.datatype.boolean())

export const getLogoutResponseMock = (): Unit => ({})

export const getVerifyEmailVerifyCodeResponseMock = (): boolean => (faker.datatype.boolean())

export const getSendEmailVerifyCodeResponseMock = (): boolean => (faker.datatype.boolean())

export const getSignupResponseMock = (overrideResponse: Partial< UserTokenDto > = {}): UserTokenDto => ({accessToken: faker.word.sample(), refreshToken: faker.word.sample(), ...overrideResponse})

export const getVerifyEmailSignupResponseMock = (): boolean => (faker.datatype.boolean())

export const getOptOutEmailResponseMock = (): boolean => (faker.datatype.boolean())

export const getLoginResponseMock = (overrideResponse: Partial< UserTokenDto > = {}): UserTokenDto => ({accessToken: faker.word.sample(), refreshToken: faker.word.sample(), ...overrideResponse})

export const getVerifyCommonVerificationMailResponseMock = (overrideResponse: Partial< VerificationResultDto > = {}): VerificationResultDto => ({duplicated: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), email: faker.word.sample(), isDuplicated: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isVerified: faker.datatype.boolean(), token: faker.helpers.arrayElement([faker.word.sample(), undefined]), ...overrideResponse})

export const getSendCommonVerificationMailResponseMock = (): boolean => (faker.datatype.boolean())

export const getHealthResponseMock = (): string => (faker.word.sample())

export const getLogResponseMock = (): string => (faker.word.sample())

export const getGetInfoBySharingIdResponseMock = (overrideResponse: Partial< InfoToShareResponse > = {}): InfoToShareResponse => ({expiredDate: `${faker.date.past().toISOString().split('.')[0]}Z`, sharingId: faker.word.sample(), userInfo: {birthDate: `${faker.date.past().toISOString().split('.')[0]}Z`, book: faker.helpers.arrayElement([{bookName: faker.word.sample(), cause: faker.word.sample()}, undefined]), dateStyle: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), drinking: {drinkingAmount: faker.helpers.arrayElement([faker.word.sample(), undefined]), drinkingCategory: faker.helpers.arrayElement(['NON_DRINKER','DRINKER'] as const)}, foods: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), gender: faker.helpers.arrayElement(['MALE','FEMALE'] as const), height: faker.number.int({min: undefined, max: undefined}), hobbies: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), images: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({imageId: faker.word.sample(), url: faker.word.sample()})), introduction: faker.word.sample(), job: {jobCategory: faker.helpers.arrayElement(['STUDENT','EMPLOYEE','FREELANCER','ETC'] as const), jobName: faker.word.sample()}, location: {cities: faker.helpers.arrayElements(['SEOUL','GYEONGGI','INCHEON','DAEJEON','DAEGU','BUSAN','ULSAN','GWANGJU','GANGWON','SEJONG','CHUNGCHEONGNAM','CHUNGCHEONGBUK','GYEONGSANGNAM','GYEONGSANGBUK','JEOLANAM','JEOLABUK','JEJU'] as const), towns: faker.helpers.arrayElements(['GANGNAM','GANGDONG','GANGBUK','GANGSEO','GWANAK','GWANGJIN','GURO','GEUMCHEON','NOWON','DOBONG','DONGDAEMUN','DONGJAK','MAPO','SEODAEMUN','SEOCHO','SEONGDONG','SEONGBUK','SONGPA','YANGCHEON','YEONGDEUNGPO','YONGSAN','EUNPYEONG','JONGNO','SEOUL_JUNG','JUNGRANG','GAPYEONG','GOYANG','GWACHEON','GWANGMYEONG','GWANGJU','GURI','GUNPO','GIMPO','NAMYANGJU','DONGDUCHEON','BUCHEON','SEONGNAM','SUWON','SIHEUNG','ANSAN','ANSEONG','ANYANG','YANGJU','YANGPYEONG','YEOJU','YEONCHEON','OSAN','YONGIN','UIWANG','UIJEONGBU','ICHEON','PAJU','PYEONGTAEK','POCHEON','HANAM','HWASEONG','GANGHWA','GYEYANG','NAMDONG','INCHEON_DONG','MICHUHOL','BUPYEONG','SEO','YEONSU','ONGJIN','INCHEON_JUNG','DAEDEOK','DAEJEON_DONG','DAEJEON_SEO','YUSEONG','DAEJEON_JUNG','BUSAN_GANGSEO','GEUMJEONG','GIJANG','BUSAN_NAM','BUSAN_DONG','DONGNAE','BUSANJIN','BUSAN_BUK','SASANG','SAHA','BUSAN_SEO','SUYEONG','YEONJE','YEONGDO','BUSAN_JUNG','HAEUNDAE','ULSAN_NAM','ULSAN_DONG','ULSAN_BUK','ULJU','ULSAN_JUNG','GWANGSAN','GWANGJU_NAM','GWANGJU_DONG','GWANGJU_BUK','GWANGJU_SEO','GANGNEUNG','GOSEONG','DONGHAE','SAMCHEOK','SOKCHO','YANGGU','YANGYANG','YEONGWOL','WONJU','INJE','JEONGSEON','CHEORWON','CHUNCHEON','TAEBAEK','PYEONGCHANG','HONGCHEON','HWACHEON','HOENGSEONG','SEJONG','GOESAN','DANYANG','BOEUN','YEONGDONG','OKCHEON','EUMSEONG','JECHEON','JEUNGPYEONG','JINCHEON','CHEONGJU','CHUNGJU','GYERYONG','GONGJU','GEUMSAN','NONSAN','DANGJIN','BORYEONG','BUYEO','SEOSAN','SEOCHON','ASAN','YEONGI','YESAN','CHEONAN','CHEONGYANG','TAEAN','HONGSEONG','GYEONGSAN','GYEONGJU','GORYEONG','GUMI','GIMCHEON','MUNGYEONG','BONGHWA','SANGJU','SEONGJU','ANDONG','YEONGDEOK','YEONGYANG','YEONGJU','YEONGCHEON','YECHUN','ULLUNG','ULJIN','UISEONG','CHEONGDO','CHEONGSONG','CHILGOK','POHANG','GEOJE','GEOCHANG','GOSEONG_GN','GIMHAE','NAMHAE','MIRYANG','SACHEON','SANCHEONG','YANGSAN','UIRYEONG','JINJU','CHANGNYEONG','CHANGWON','TONGYEONG','HADONG','HAMAN','HAMYANG','HAPCHEON','GOCHANG','GUNSAN','GIMJE','NAMWON','MUJU','BUAN','SUNCHANG','WANJU','IKSAN','IMSIL','JANGSU','JEONJU','JEONGEUP','JINAN','GANGJIN','GOHEUNG','GOKSEONG','GWANGYANG','GURYE','NAJU','DAMYANG','MOKPO','MUAN','BOSEONG','SUNCHEON','SINAN','YEOSU','YEONGGWANG','YEONGAM','WANDO','JANGSEONG','JANGHEUNG','JINDO','HAMPYEONG','HAENAM','HWASUN','JEJU','SEOGWIPO','GUNWEE','DAEGU_NAM','DALSEO','DALSEONG','DAEGU_DONG','DAEGU_BUK','DAEGU_SEO','SUSEONG','DAEGU_JUNG'] as const)}, mbti: faker.helpers.arrayElement([faker.helpers.arrayElement(['ENFP','ENFJ','ENTJ','ENTP','ESFJ','ESFP','ESTJ','ESTP','INFJ','INFP','INTJ','INTP','ISFJ','ISFP','ISTJ','ISTP'] as const), undefined]), movie: faker.helpers.arrayElement([{cause: faker.word.sample(), movieName: faker.word.sample()}, undefined]), pets: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), religion: {religionCategory: faker.helpers.arrayElement(['CHRISTIANITY','CATHOLICISM','BUDDHISM','IRRELIGION','ETC'] as const), religionName: faker.helpers.arrayElement([faker.word.sample(), undefined])}, smoking: {smokingAmount: faker.helpers.arrayElement([faker.word.sample(), undefined]), smokingCategory: faker.helpers.arrayElement(['NON_SMOKER','SMOKER','ETC'] as const)}}, ...overrideResponse})

export const getValidateLinkResponseMock = (overrideResponse: Partial< ValidateLinkResponse > = {}): ValidateLinkResponse => ({isValid: faker.datatype.boolean(), linkId: faker.word.sample(), ...overrideResponse})

export const getGetLinkByMatchMakerIdResponseMock = (overrideResponse: Partial< LinkStatusResponse > = {}): LinkStatusResponse => ({isOpen: faker.datatype.boolean(), linkId: faker.word.sample(), linkKey: faker.word.sample(), ...overrideResponse})

export const getGetMatchMakerNameResponseMock = (): string => (faker.word.sample())

export const getSearchInfoResponseMock = (overrideResponse: Partial< SearchInfoResponse > = {}): SearchInfoResponse => ({count: faker.number.int({min: undefined, max: undefined}), infos: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({birthDate: `${faker.date.past().toISOString().split('.')[0]}Z`, drinking: {drinkingAmount: faker.helpers.arrayElement([faker.word.sample(), undefined]), drinkingCategory: faker.helpers.arrayElement(['NON_DRINKER','DRINKER'] as const)}, gender: faker.helpers.arrayElement(['MALE','FEMALE'] as const), height: faker.number.int({min: undefined, max: undefined}), hobbies: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), id: faker.helpers.arrayElement([faker.word.sample(), undefined]), images: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({imageId: faker.word.sample(), url: faker.word.sample()})), job: {jobCategory: faker.helpers.arrayElement(['STUDENT','EMPLOYEE','FREELANCER','ETC'] as const), jobName: faker.word.sample()}, location: {cities: faker.helpers.arrayElements(['SEOUL','GYEONGGI','INCHEON','DAEJEON','DAEGU','BUSAN','ULSAN','GWANGJU','GANGWON','SEJONG','CHUNGCHEONGNAM','CHUNGCHEONGBUK','GYEONGSANGNAM','GYEONGSANGBUK','JEOLANAM','JEOLABUK','JEJU'] as const), towns: faker.helpers.arrayElements(['GANGNAM','GANGDONG','GANGBUK','GANGSEO','GWANAK','GWANGJIN','GURO','GEUMCHEON','NOWON','DOBONG','DONGDAEMUN','DONGJAK','MAPO','SEODAEMUN','SEOCHO','SEONGDONG','SEONGBUK','SONGPA','YANGCHEON','YEONGDEUNGPO','YONGSAN','EUNPYEONG','JONGNO','SEOUL_JUNG','JUNGRANG','GAPYEONG','GOYANG','GWACHEON','GWANGMYEONG','GWANGJU','GURI','GUNPO','GIMPO','NAMYANGJU','DONGDUCHEON','BUCHEON','SEONGNAM','SUWON','SIHEUNG','ANSAN','ANSEONG','ANYANG','YANGJU','YANGPYEONG','YEOJU','YEONCHEON','OSAN','YONGIN','UIWANG','UIJEONGBU','ICHEON','PAJU','PYEONGTAEK','POCHEON','HANAM','HWASEONG','GANGHWA','GYEYANG','NAMDONG','INCHEON_DONG','MICHUHOL','BUPYEONG','SEO','YEONSU','ONGJIN','INCHEON_JUNG','DAEDEOK','DAEJEON_DONG','DAEJEON_SEO','YUSEONG','DAEJEON_JUNG','BUSAN_GANGSEO','GEUMJEONG','GIJANG','BUSAN_NAM','BUSAN_DONG','DONGNAE','BUSANJIN','BUSAN_BUK','SASANG','SAHA','BUSAN_SEO','SUYEONG','YEONJE','YEONGDO','BUSAN_JUNG','HAEUNDAE','ULSAN_NAM','ULSAN_DONG','ULSAN_BUK','ULJU','ULSAN_JUNG','GWANGSAN','GWANGJU_NAM','GWANGJU_DONG','GWANGJU_BUK','GWANGJU_SEO','GANGNEUNG','GOSEONG','DONGHAE','SAMCHEOK','SOKCHO','YANGGU','YANGYANG','YEONGWOL','WONJU','INJE','JEONGSEON','CHEORWON','CHUNCHEON','TAEBAEK','PYEONGCHANG','HONGCHEON','HWACHEON','HOENGSEONG','SEJONG','GOESAN','DANYANG','BOEUN','YEONGDONG','OKCHEON','EUMSEONG','JECHEON','JEUNGPYEONG','JINCHEON','CHEONGJU','CHUNGJU','GYERYONG','GONGJU','GEUMSAN','NONSAN','DANGJIN','BORYEONG','BUYEO','SEOSAN','SEOCHON','ASAN','YEONGI','YESAN','CHEONAN','CHEONGYANG','TAEAN','HONGSEONG','GYEONGSAN','GYEONGJU','GORYEONG','GUMI','GIMCHEON','MUNGYEONG','BONGHWA','SANGJU','SEONGJU','ANDONG','YEONGDEOK','YEONGYANG','YEONGJU','YEONGCHEON','YECHUN','ULLUNG','ULJIN','UISEONG','CHEONGDO','CHEONGSONG','CHILGOK','POHANG','GEOJE','GEOCHANG','GOSEONG_GN','GIMHAE','NAMHAE','MIRYANG','SACHEON','SANCHEONG','YANGSAN','UIRYEONG','JINJU','CHANGNYEONG','CHANGWON','TONGYEONG','HADONG','HAMAN','HAMYANG','HAPCHEON','GOCHANG','GUNSAN','GIMJE','NAMWON','MUJU','BUAN','SUNCHANG','WANJU','IKSAN','IMSIL','JANGSU','JEONJU','JEONGEUP','JINAN','GANGJIN','GOHEUNG','GOKSEONG','GWANGYANG','GURYE','NAJU','DAMYANG','MOKPO','MUAN','BOSEONG','SUNCHEON','SINAN','YEOSU','YEONGGWANG','YEONGAM','WANDO','JANGSEONG','JANGHEUNG','JINDO','HAMPYEONG','HAENAM','HWASUN','JEJU','SEOGWIPO','GUNWEE','DAEGU_NAM','DALSEO','DALSEONG','DAEGU_DONG','DAEGU_BUK','DAEGU_SEO','SUSEONG','DAEGU_JUNG'] as const)}, mbti: faker.helpers.arrayElement([faker.helpers.arrayElement(['ENFP','ENFJ','ENTJ','ENTP','ESFJ','ESFP','ESTJ','ESTP','INFJ','INFP','INTJ','INTP','ISFJ','ISFP','ISTJ','ISTP'] as const), undefined]), name: faker.word.sample(), religion: {religionCategory: faker.helpers.arrayElement(['CHRISTIANITY','CATHOLICISM','BUDDHISM','IRRELIGION','ETC'] as const), religionName: faker.helpers.arrayElement([faker.word.sample(), undefined])}, smoking: {smokingAmount: faker.helpers.arrayElement([faker.word.sample(), undefined]), smokingCategory: faker.helpers.arrayElement(['NON_SMOKER','SMOKER','ETC'] as const)}})), ...overrideResponse})

export const getGetInfoResponseMock = (overrideResponse: Partial< DetailedInfoDto > = {}): DetailedInfoDto => ({id: faker.word.sample(), idealPartner: faker.helpers.arrayElement([{ageRange: faker.helpers.arrayElement([{max: faker.number.int({min: undefined, max: undefined}), min: faker.number.int({min: undefined, max: undefined})}, undefined]), drinking: {drinkingAmount: faker.helpers.arrayElement([faker.word.sample(), undefined]), drinkingCategory: faker.helpers.arrayElement(['NO_PROBLEM','ONE_TWO_TIMES_A_WEEK','ONE_TWO_TIMES_A_MONTH','NEVER','ETC'] as const)}, heightRange: faker.helpers.arrayElement([{max: faker.number.int({min: undefined, max: undefined}), min: faker.number.int({min: undefined, max: undefined})}, undefined]), hobbies: faker.helpers.arrayElement(['IMPORTANT','NOT_IMPORTANT'] as const), images: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({imageId: faker.word.sample(), url: faker.word.sample()})), undefined]), location: faker.helpers.arrayElement([faker.helpers.arrayElement(['IMPORTANT','NOT_IMPORTANT'] as const), undefined]), religion: {religionCategory: faker.helpers.arrayElement(['CHRISTIANITY','CATHOLICISM','BUDDHISM','IRRELIGION','ETC'] as const), religionName: faker.helpers.arrayElement([faker.word.sample(), undefined])}, requiredOptions: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), smoking: {smokingAmount: faker.helpers.arrayElement([faker.word.sample(), undefined]), smokingCategory: faker.helpers.arrayElement(['DOESNT_MATTER','NEVER','GOOD','ETC'] as const)}, style: faker.helpers.arrayElement([faker.word.sample(), undefined]), toMatchMaker: faker.word.sample()}, undefined]), userInfo: {birthDate: `${faker.date.past().toISOString().split('.')[0]}Z`, book: faker.helpers.arrayElement([{bookName: faker.word.sample(), cause: faker.word.sample()}, undefined]), dateStyle: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), drinking: {drinkingAmount: faker.helpers.arrayElement([faker.word.sample(), undefined]), drinkingCategory: faker.helpers.arrayElement(['NON_DRINKER','DRINKER'] as const)}, foods: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), gender: faker.helpers.arrayElement(['MALE','FEMALE'] as const), height: faker.number.int({min: undefined, max: undefined}), hobbies: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), images: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({imageId: faker.word.sample(), url: faker.word.sample()})), introduction: faker.helpers.arrayElement([faker.word.sample(), undefined]), job: {jobCategory: faker.helpers.arrayElement(['STUDENT','EMPLOYEE','FREELANCER','ETC'] as const), jobName: faker.word.sample()}, location: {cities: faker.helpers.arrayElements(['SEOUL','GYEONGGI','INCHEON','DAEJEON','DAEGU','BUSAN','ULSAN','GWANGJU','GANGWON','SEJONG','CHUNGCHEONGNAM','CHUNGCHEONGBUK','GYEONGSANGNAM','GYEONGSANGBUK','JEOLANAM','JEOLABUK','JEJU'] as const), towns: faker.helpers.arrayElements(['GANGNAM','GANGDONG','GANGBUK','GANGSEO','GWANAK','GWANGJIN','GURO','GEUMCHEON','NOWON','DOBONG','DONGDAEMUN','DONGJAK','MAPO','SEODAEMUN','SEOCHO','SEONGDONG','SEONGBUK','SONGPA','YANGCHEON','YEONGDEUNGPO','YONGSAN','EUNPYEONG','JONGNO','SEOUL_JUNG','JUNGRANG','GAPYEONG','GOYANG','GWACHEON','GWANGMYEONG','GWANGJU','GURI','GUNPO','GIMPO','NAMYANGJU','DONGDUCHEON','BUCHEON','SEONGNAM','SUWON','SIHEUNG','ANSAN','ANSEONG','ANYANG','YANGJU','YANGPYEONG','YEOJU','YEONCHEON','OSAN','YONGIN','UIWANG','UIJEONGBU','ICHEON','PAJU','PYEONGTAEK','POCHEON','HANAM','HWASEONG','GANGHWA','GYEYANG','NAMDONG','INCHEON_DONG','MICHUHOL','BUPYEONG','SEO','YEONSU','ONGJIN','INCHEON_JUNG','DAEDEOK','DAEJEON_DONG','DAEJEON_SEO','YUSEONG','DAEJEON_JUNG','BUSAN_GANGSEO','GEUMJEONG','GIJANG','BUSAN_NAM','BUSAN_DONG','DONGNAE','BUSANJIN','BUSAN_BUK','SASANG','SAHA','BUSAN_SEO','SUYEONG','YEONJE','YEONGDO','BUSAN_JUNG','HAEUNDAE','ULSAN_NAM','ULSAN_DONG','ULSAN_BUK','ULJU','ULSAN_JUNG','GWANGSAN','GWANGJU_NAM','GWANGJU_DONG','GWANGJU_BUK','GWANGJU_SEO','GANGNEUNG','GOSEONG','DONGHAE','SAMCHEOK','SOKCHO','YANGGU','YANGYANG','YEONGWOL','WONJU','INJE','JEONGSEON','CHEORWON','CHUNCHEON','TAEBAEK','PYEONGCHANG','HONGCHEON','HWACHEON','HOENGSEONG','SEJONG','GOESAN','DANYANG','BOEUN','YEONGDONG','OKCHEON','EUMSEONG','JECHEON','JEUNGPYEONG','JINCHEON','CHEONGJU','CHUNGJU','GYERYONG','GONGJU','GEUMSAN','NONSAN','DANGJIN','BORYEONG','BUYEO','SEOSAN','SEOCHON','ASAN','YEONGI','YESAN','CHEONAN','CHEONGYANG','TAEAN','HONGSEONG','GYEONGSAN','GYEONGJU','GORYEONG','GUMI','GIMCHEON','MUNGYEONG','BONGHWA','SANGJU','SEONGJU','ANDONG','YEONGDEOK','YEONGYANG','YEONGJU','YEONGCHEON','YECHUN','ULLUNG','ULJIN','UISEONG','CHEONGDO','CHEONGSONG','CHILGOK','POHANG','GEOJE','GEOCHANG','GOSEONG_GN','GIMHAE','NAMHAE','MIRYANG','SACHEON','SANCHEONG','YANGSAN','UIRYEONG','JINJU','CHANGNYEONG','CHANGWON','TONGYEONG','HADONG','HAMAN','HAMYANG','HAPCHEON','GOCHANG','GUNSAN','GIMJE','NAMWON','MUJU','BUAN','SUNCHANG','WANJU','IKSAN','IMSIL','JANGSU','JEONJU','JEONGEUP','JINAN','GANGJIN','GOHEUNG','GOKSEONG','GWANGYANG','GURYE','NAJU','DAMYANG','MOKPO','MUAN','BOSEONG','SUNCHEON','SINAN','YEOSU','YEONGGWANG','YEONGAM','WANDO','JANGSEONG','JANGHEUNG','JINDO','HAMPYEONG','HAENAM','HWASUN','JEJU','SEOGWIPO','GUNWEE','DAEGU_NAM','DALSEO','DALSEONG','DAEGU_DONG','DAEGU_BUK','DAEGU_SEO','SUSEONG','DAEGU_JUNG'] as const)}, mbti: faker.helpers.arrayElement([faker.helpers.arrayElement(['ENFP','ENFJ','ENTJ','ENTP','ESFJ','ESFP','ESTJ','ESTP','INFJ','INFP','INTJ','INTP','ISFJ','ISFP','ISTJ','ISTP'] as const), undefined]), movie: faker.helpers.arrayElement([{cause: faker.word.sample(), movieName: faker.word.sample()}, undefined]), name: faker.word.sample(), pets: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), religion: {religionCategory: faker.helpers.arrayElement(['CHRISTIANITY','CATHOLICISM','BUDDHISM','IRRELIGION','ETC'] as const), religionName: faker.helpers.arrayElement([faker.word.sample(), undefined])}, smoking: {smokingAmount: faker.helpers.arrayElement([faker.word.sample(), undefined]), smokingCategory: faker.helpers.arrayElement(['NON_SMOKER','SMOKER','ETC'] as const)}}, ...overrideResponse})

export const getGetAllInfoResponseMock = (): ArchivedInfoResponse[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({birthDate: `${faker.date.past().toISOString().split('.')[0]}Z`, drinking: {drinkingAmount: faker.helpers.arrayElement([faker.word.sample(), undefined]), drinkingCategory: faker.helpers.arrayElement(['NON_DRINKER','DRINKER'] as const)}, gender: faker.helpers.arrayElement(['MALE','FEMALE'] as const), height: faker.number.int({min: undefined, max: undefined}), hobbies: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), id: faker.helpers.arrayElement([faker.word.sample(), undefined]), images: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({imageId: faker.word.sample(), url: faker.word.sample()})), job: {jobCategory: faker.helpers.arrayElement(['STUDENT','EMPLOYEE','FREELANCER','ETC'] as const), jobName: faker.word.sample()}, location: {cities: faker.helpers.arrayElements(['SEOUL','GYEONGGI','INCHEON','DAEJEON','DAEGU','BUSAN','ULSAN','GWANGJU','GANGWON','SEJONG','CHUNGCHEONGNAM','CHUNGCHEONGBUK','GYEONGSANGNAM','GYEONGSANGBUK','JEOLANAM','JEOLABUK','JEJU'] as const), towns: faker.helpers.arrayElements(['GANGNAM','GANGDONG','GANGBUK','GANGSEO','GWANAK','GWANGJIN','GURO','GEUMCHEON','NOWON','DOBONG','DONGDAEMUN','DONGJAK','MAPO','SEODAEMUN','SEOCHO','SEONGDONG','SEONGBUK','SONGPA','YANGCHEON','YEONGDEUNGPO','YONGSAN','EUNPYEONG','JONGNO','SEOUL_JUNG','JUNGRANG','GAPYEONG','GOYANG','GWACHEON','GWANGMYEONG','GWANGJU','GURI','GUNPO','GIMPO','NAMYANGJU','DONGDUCHEON','BUCHEON','SEONGNAM','SUWON','SIHEUNG','ANSAN','ANSEONG','ANYANG','YANGJU','YANGPYEONG','YEOJU','YEONCHEON','OSAN','YONGIN','UIWANG','UIJEONGBU','ICHEON','PAJU','PYEONGTAEK','POCHEON','HANAM','HWASEONG','GANGHWA','GYEYANG','NAMDONG','INCHEON_DONG','MICHUHOL','BUPYEONG','SEO','YEONSU','ONGJIN','INCHEON_JUNG','DAEDEOK','DAEJEON_DONG','DAEJEON_SEO','YUSEONG','DAEJEON_JUNG','BUSAN_GANGSEO','GEUMJEONG','GIJANG','BUSAN_NAM','BUSAN_DONG','DONGNAE','BUSANJIN','BUSAN_BUK','SASANG','SAHA','BUSAN_SEO','SUYEONG','YEONJE','YEONGDO','BUSAN_JUNG','HAEUNDAE','ULSAN_NAM','ULSAN_DONG','ULSAN_BUK','ULJU','ULSAN_JUNG','GWANGSAN','GWANGJU_NAM','GWANGJU_DONG','GWANGJU_BUK','GWANGJU_SEO','GANGNEUNG','GOSEONG','DONGHAE','SAMCHEOK','SOKCHO','YANGGU','YANGYANG','YEONGWOL','WONJU','INJE','JEONGSEON','CHEORWON','CHUNCHEON','TAEBAEK','PYEONGCHANG','HONGCHEON','HWACHEON','HOENGSEONG','SEJONG','GOESAN','DANYANG','BOEUN','YEONGDONG','OKCHEON','EUMSEONG','JECHEON','JEUNGPYEONG','JINCHEON','CHEONGJU','CHUNGJU','GYERYONG','GONGJU','GEUMSAN','NONSAN','DANGJIN','BORYEONG','BUYEO','SEOSAN','SEOCHON','ASAN','YEONGI','YESAN','CHEONAN','CHEONGYANG','TAEAN','HONGSEONG','GYEONGSAN','GYEONGJU','GORYEONG','GUMI','GIMCHEON','MUNGYEONG','BONGHWA','SANGJU','SEONGJU','ANDONG','YEONGDEOK','YEONGYANG','YEONGJU','YEONGCHEON','YECHUN','ULLUNG','ULJIN','UISEONG','CHEONGDO','CHEONGSONG','CHILGOK','POHANG','GEOJE','GEOCHANG','GOSEONG_GN','GIMHAE','NAMHAE','MIRYANG','SACHEON','SANCHEONG','YANGSAN','UIRYEONG','JINJU','CHANGNYEONG','CHANGWON','TONGYEONG','HADONG','HAMAN','HAMYANG','HAPCHEON','GOCHANG','GUNSAN','GIMJE','NAMWON','MUJU','BUAN','SUNCHANG','WANJU','IKSAN','IMSIL','JANGSU','JEONJU','JEONGEUP','JINAN','GANGJIN','GOHEUNG','GOKSEONG','GWANGYANG','GURYE','NAJU','DAMYANG','MOKPO','MUAN','BOSEONG','SUNCHEON','SINAN','YEOSU','YEONGGWANG','YEONGAM','WANDO','JANGSEONG','JANGHEUNG','JINDO','HAMPYEONG','HAENAM','HWASUN','JEJU','SEOGWIPO','GUNWEE','DAEGU_NAM','DALSEO','DALSEONG','DAEGU_DONG','DAEGU_BUK','DAEGU_SEO','SUSEONG','DAEGU_JUNG'] as const)}, mbti: faker.helpers.arrayElement([faker.helpers.arrayElement(['ENFP','ENFJ','ENTJ','ENTP','ESFJ','ESFP','ESTJ','ESTP','INFJ','INFP','INTJ','INTP','ISFJ','ISFP','ISTJ','ISTP'] as const), undefined]), name: faker.word.sample(), religion: {religionCategory: faker.helpers.arrayElement(['CHRISTIANITY','CATHOLICISM','BUDDHISM','IRRELIGION','ETC'] as const), religionName: faker.helpers.arrayElement([faker.word.sample(), undefined])}, smoking: {smokingAmount: faker.helpers.arrayElement([faker.word.sample(), undefined]), smokingCategory: faker.helpers.arrayElement(['NON_SMOKER','SMOKER','ETC'] as const)}})))

export const getGetAddressResponseMock = (): CityAndTownResponse[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({city: {city: faker.helpers.arrayElement(['SEOUL','GYEONGGI','INCHEON','DAEJEON','DAEGU','BUSAN','ULSAN','GWANGJU','GANGWON','SEJONG','CHUNGCHEONGNAM','CHUNGCHEONGBUK','GYEONGSANGNAM','GYEONGSANGBUK','JEOLANAM','JEOLABUK','JEJU'] as const), cityName: faker.word.sample()}, town: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({town: faker.helpers.arrayElement(['GANGNAM','GANGDONG','GANGBUK','GANGSEO','GWANAK','GWANGJIN','GURO','GEUMCHEON','NOWON','DOBONG','DONGDAEMUN','DONGJAK','MAPO','SEODAEMUN','SEOCHO','SEONGDONG','SEONGBUK','SONGPA','YANGCHEON','YEONGDEUNGPO','YONGSAN','EUNPYEONG','JONGNO','SEOUL_JUNG','JUNGRANG','GAPYEONG','GOYANG','GWACHEON','GWANGMYEONG','GWANGJU','GURI','GUNPO','GIMPO','NAMYANGJU','DONGDUCHEON','BUCHEON','SEONGNAM','SUWON','SIHEUNG','ANSAN','ANSEONG','ANYANG','YANGJU','YANGPYEONG','YEOJU','YEONCHEON','OSAN','YONGIN','UIWANG','UIJEONGBU','ICHEON','PAJU','PYEONGTAEK','POCHEON','HANAM','HWASEONG','GANGHWA','GYEYANG','NAMDONG','INCHEON_DONG','MICHUHOL','BUPYEONG','SEO','YEONSU','ONGJIN','INCHEON_JUNG','DAEDEOK','DAEJEON_DONG','DAEJEON_SEO','YUSEONG','DAEJEON_JUNG','BUSAN_GANGSEO','GEUMJEONG','GIJANG','BUSAN_NAM','BUSAN_DONG','DONGNAE','BUSANJIN','BUSAN_BUK','SASANG','SAHA','BUSAN_SEO','SUYEONG','YEONJE','YEONGDO','BUSAN_JUNG','HAEUNDAE','ULSAN_NAM','ULSAN_DONG','ULSAN_BUK','ULJU','ULSAN_JUNG','GWANGSAN','GWANGJU_NAM','GWANGJU_DONG','GWANGJU_BUK','GWANGJU_SEO','GANGNEUNG','GOSEONG','DONGHAE','SAMCHEOK','SOKCHO','YANGGU','YANGYANG','YEONGWOL','WONJU','INJE','JEONGSEON','CHEORWON','CHUNCHEON','TAEBAEK','PYEONGCHANG','HONGCHEON','HWACHEON','HOENGSEONG','SEJONG','GOESAN','DANYANG','BOEUN','YEONGDONG','OKCHEON','EUMSEONG','JECHEON','JEUNGPYEONG','JINCHEON','CHEONGJU','CHUNGJU','GYERYONG','GONGJU','GEUMSAN','NONSAN','DANGJIN','BORYEONG','BUYEO','SEOSAN','SEOCHON','ASAN','YEONGI','YESAN','CHEONAN','CHEONGYANG','TAEAN','HONGSEONG','GYEONGSAN','GYEONGJU','GORYEONG','GUMI','GIMCHEON','MUNGYEONG','BONGHWA','SANGJU','SEONGJU','ANDONG','YEONGDEOK','YEONGYANG','YEONGJU','YEONGCHEON','YECHUN','ULLUNG','ULJIN','UISEONG','CHEONGDO','CHEONGSONG','CHILGOK','POHANG','GEOJE','GEOCHANG','GOSEONG_GN','GIMHAE','NAMHAE','MIRYANG','SACHEON','SANCHEONG','YANGSAN','UIRYEONG','JINJU','CHANGNYEONG','CHANGWON','TONGYEONG','HADONG','HAMAN','HAMYANG','HAPCHEON','GOCHANG','GUNSAN','GIMJE','NAMWON','MUJU','BUAN','SUNCHANG','WANJU','IKSAN','IMSIL','JANGSU','JEONJU','JEONGEUP','JINAN','GANGJIN','GOHEUNG','GOKSEONG','GWANGYANG','GURYE','NAJU','DAMYANG','MOKPO','MUAN','BOSEONG','SUNCHEON','SINAN','YEOSU','YEONGGWANG','YEONGAM','WANDO','JANGSEONG','JANGHEUNG','JINDO','HAMPYEONG','HAENAM','HWASUN','JEJU','SEOGWIPO','GUNWEE','DAEGU_NAM','DALSEO','DALSEONG','DAEGU_DONG','DAEGU_BUK','DAEGU_SEO','SUSEONG','DAEGU_JUNG'] as const), townName: faker.word.sample()}))})))

export const getSearchGroupInfoResponseMock = (overrideResponse: Partial< SearchGroupInfoResponse > = {}): SearchGroupInfoResponse => ({count: faker.number.int({min: undefined, max: undefined}), infos: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({birthDate: `${faker.date.past().toISOString().split('.')[0]}Z`, comment: faker.helpers.arrayElement([faker.word.sample(), undefined]), creatorImage: faker.helpers.arrayElement([faker.word.sample(), undefined]), creatorName: faker.word.sample(), drinking: {drinkingAmount: faker.helpers.arrayElement([faker.word.sample(), undefined]), drinkingCategory: faker.helpers.arrayElement(['NON_DRINKER','DRINKER'] as const)}, gender: faker.helpers.arrayElement(['MALE','FEMALE'] as const), height: faker.number.int({min: undefined, max: undefined}), hobbies: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), id: faker.helpers.arrayElement([faker.word.sample(), undefined]), images: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({imageId: faker.word.sample(), url: faker.word.sample()})), isCreatedByMe: faker.datatype.boolean(), job: {jobCategory: faker.helpers.arrayElement(['STUDENT','EMPLOYEE','FREELANCER','ETC'] as const), jobName: faker.word.sample()}, location: {cities: faker.helpers.arrayElements(['SEOUL','GYEONGGI','INCHEON','DAEJEON','DAEGU','BUSAN','ULSAN','GWANGJU','GANGWON','SEJONG','CHUNGCHEONGNAM','CHUNGCHEONGBUK','GYEONGSANGNAM','GYEONGSANGBUK','JEOLANAM','JEOLABUK','JEJU'] as const), towns: faker.helpers.arrayElements(['GANGNAM','GANGDONG','GANGBUK','GANGSEO','GWANAK','GWANGJIN','GURO','GEUMCHEON','NOWON','DOBONG','DONGDAEMUN','DONGJAK','MAPO','SEODAEMUN','SEOCHO','SEONGDONG','SEONGBUK','SONGPA','YANGCHEON','YEONGDEUNGPO','YONGSAN','EUNPYEONG','JONGNO','SEOUL_JUNG','JUNGRANG','GAPYEONG','GOYANG','GWACHEON','GWANGMYEONG','GWANGJU','GURI','GUNPO','GIMPO','NAMYANGJU','DONGDUCHEON','BUCHEON','SEONGNAM','SUWON','SIHEUNG','ANSAN','ANSEONG','ANYANG','YANGJU','YANGPYEONG','YEOJU','YEONCHEON','OSAN','YONGIN','UIWANG','UIJEONGBU','ICHEON','PAJU','PYEONGTAEK','POCHEON','HANAM','HWASEONG','GANGHWA','GYEYANG','NAMDONG','INCHEON_DONG','MICHUHOL','BUPYEONG','SEO','YEONSU','ONGJIN','INCHEON_JUNG','DAEDEOK','DAEJEON_DONG','DAEJEON_SEO','YUSEONG','DAEJEON_JUNG','BUSAN_GANGSEO','GEUMJEONG','GIJANG','BUSAN_NAM','BUSAN_DONG','DONGNAE','BUSANJIN','BUSAN_BUK','SASANG','SAHA','BUSAN_SEO','SUYEONG','YEONJE','YEONGDO','BUSAN_JUNG','HAEUNDAE','ULSAN_NAM','ULSAN_DONG','ULSAN_BUK','ULJU','ULSAN_JUNG','GWANGSAN','GWANGJU_NAM','GWANGJU_DONG','GWANGJU_BUK','GWANGJU_SEO','GANGNEUNG','GOSEONG','DONGHAE','SAMCHEOK','SOKCHO','YANGGU','YANGYANG','YEONGWOL','WONJU','INJE','JEONGSEON','CHEORWON','CHUNCHEON','TAEBAEK','PYEONGCHANG','HONGCHEON','HWACHEON','HOENGSEONG','SEJONG','GOESAN','DANYANG','BOEUN','YEONGDONG','OKCHEON','EUMSEONG','JECHEON','JEUNGPYEONG','JINCHEON','CHEONGJU','CHUNGJU','GYERYONG','GONGJU','GEUMSAN','NONSAN','DANGJIN','BORYEONG','BUYEO','SEOSAN','SEOCHON','ASAN','YEONGI','YESAN','CHEONAN','CHEONGYANG','TAEAN','HONGSEONG','GYEONGSAN','GYEONGJU','GORYEONG','GUMI','GIMCHEON','MUNGYEONG','BONGHWA','SANGJU','SEONGJU','ANDONG','YEONGDEOK','YEONGYANG','YEONGJU','YEONGCHEON','YECHUN','ULLUNG','ULJIN','UISEONG','CHEONGDO','CHEONGSONG','CHILGOK','POHANG','GEOJE','GEOCHANG','GOSEONG_GN','GIMHAE','NAMHAE','MIRYANG','SACHEON','SANCHEONG','YANGSAN','UIRYEONG','JINJU','CHANGNYEONG','CHANGWON','TONGYEONG','HADONG','HAMAN','HAMYANG','HAPCHEON','GOCHANG','GUNSAN','GIMJE','NAMWON','MUJU','BUAN','SUNCHANG','WANJU','IKSAN','IMSIL','JANGSU','JEONJU','JEONGEUP','JINAN','GANGJIN','GOHEUNG','GOKSEONG','GWANGYANG','GURYE','NAJU','DAMYANG','MOKPO','MUAN','BOSEONG','SUNCHEON','SINAN','YEOSU','YEONGGWANG','YEONGAM','WANDO','JANGSEONG','JANGHEUNG','JINDO','HAMPYEONG','HAENAM','HWASUN','JEJU','SEOGWIPO','GUNWEE','DAEGU_NAM','DALSEO','DALSEONG','DAEGU_DONG','DAEGU_BUK','DAEGU_SEO','SUSEONG','DAEGU_JUNG'] as const)}, mbti: faker.helpers.arrayElement([faker.helpers.arrayElement(['ENFP','ENFJ','ENTJ','ENTP','ESFJ','ESFP','ESTJ','ESTP','INFJ','INFP','INTJ','INTP','ISFJ','ISFP','ISTJ','ISTP'] as const), undefined]), name: faker.word.sample(), religion: {religionCategory: faker.helpers.arrayElement(['CHRISTIANITY','CATHOLICISM','BUDDHISM','IRRELIGION','ETC'] as const), religionName: faker.helpers.arrayElement([faker.word.sample(), undefined])}, smoking: {smokingAmount: faker.helpers.arrayElement([faker.word.sample(), undefined]), smokingCategory: faker.helpers.arrayElement(['NON_SMOKER','SMOKER','ETC'] as const)}})), ...overrideResponse})

export const getGetGroupMembersResponseMock = (): GroupMemberResponse[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({status: faker.helpers.arrayElement(['ADMIN','MEMBER','PENDING'] as const), userId: faker.word.sample(), userName: faker.word.sample()})))

export const getGetGroupInfoResponseMock = (overrideResponse: Partial< GroupInfoResponse > = {}): GroupInfoResponse => ({candidateCount: faker.number.int({min: undefined, max: undefined}), groupIcon: faker.helpers.arrayElement(['LOCK','ARROW','LETTER','HEART','FOOTPRINT','WINE_GLASS','EGG','BOUQUET','RING','STAR'] as const), groupId: faker.word.sample(), groupName: faker.word.sample(), memberCount: faker.number.int({min: undefined, max: undefined}), myStatus: faker.helpers.arrayElement(['ADMIN','MEMBER','PENDING'] as const), pendingCount: faker.number.int({min: undefined, max: undefined}), ...overrideResponse})

export const getGetGroupHistoryResponseMock = (): GroupHistoryResponse[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({infoId: faker.word.sample(), timestamp: `${faker.date.past().toISOString().split('.')[0]}Z`, type: faker.helpers.arrayElement(['INFO_ADDED','INFO_SHARED'] as const), userId: faker.word.sample(), userName: faker.word.sample(), userProfileImage: faker.helpers.arrayElement([faker.word.sample(), undefined])})))

export const getGetGroupInfoDetailResponseMock = (overrideResponse: Partial< GroupInfoDetailResponse > = {}): GroupInfoDetailResponse => ({comment: faker.helpers.arrayElement([faker.word.sample(), undefined]), creatorImage: faker.helpers.arrayElement([faker.word.sample(), undefined]), creatorName: faker.word.sample(), idealPartner: faker.helpers.arrayElement([{ageRange: faker.helpers.arrayElement([{max: faker.number.int({min: undefined, max: undefined}), min: faker.number.int({min: undefined, max: undefined})}, undefined]), drinking: {drinkingAmount: faker.helpers.arrayElement([faker.word.sample(), undefined]), drinkingCategory: faker.helpers.arrayElement(['NO_PROBLEM','ONE_TWO_TIMES_A_WEEK','ONE_TWO_TIMES_A_MONTH','NEVER','ETC'] as const)}, heightRange: faker.helpers.arrayElement([{max: faker.number.int({min: undefined, max: undefined}), min: faker.number.int({min: undefined, max: undefined})}, undefined]), hobbies: faker.helpers.arrayElement(['IMPORTANT','NOT_IMPORTANT'] as const), images: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({imageId: faker.word.sample(), url: faker.word.sample()})), undefined]), location: faker.helpers.arrayElement([faker.helpers.arrayElement(['IMPORTANT','NOT_IMPORTANT'] as const), undefined]), religion: {religionCategory: faker.helpers.arrayElement(['CHRISTIANITY','CATHOLICISM','BUDDHISM','IRRELIGION','ETC'] as const), religionName: faker.helpers.arrayElement([faker.word.sample(), undefined])}, requiredOptions: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), smoking: {smokingAmount: faker.helpers.arrayElement([faker.word.sample(), undefined]), smokingCategory: faker.helpers.arrayElement(['DOESNT_MATTER','NEVER','GOOD','ETC'] as const)}, style: faker.helpers.arrayElement([faker.word.sample(), undefined]), toMatchMaker: faker.word.sample()}, undefined]), infoId: faker.word.sample(), isCreatedByMe: faker.datatype.boolean(), userInfo: {birthDate: `${faker.date.past().toISOString().split('.')[0]}Z`, book: faker.helpers.arrayElement([{bookName: faker.word.sample(), cause: faker.word.sample()}, undefined]), dateStyle: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), drinking: {drinkingAmount: faker.helpers.arrayElement([faker.word.sample(), undefined]), drinkingCategory: faker.helpers.arrayElement(['NON_DRINKER','DRINKER'] as const)}, foods: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), gender: faker.helpers.arrayElement(['MALE','FEMALE'] as const), height: faker.number.int({min: undefined, max: undefined}), hobbies: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), images: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({imageId: faker.word.sample(), url: faker.word.sample()})), introduction: faker.helpers.arrayElement([faker.word.sample(), undefined]), job: {jobCategory: faker.helpers.arrayElement(['STUDENT','EMPLOYEE','FREELANCER','ETC'] as const), jobName: faker.word.sample()}, location: {cities: faker.helpers.arrayElements(['SEOUL','GYEONGGI','INCHEON','DAEJEON','DAEGU','BUSAN','ULSAN','GWANGJU','GANGWON','SEJONG','CHUNGCHEONGNAM','CHUNGCHEONGBUK','GYEONGSANGNAM','GYEONGSANGBUK','JEOLANAM','JEOLABUK','JEJU'] as const), towns: faker.helpers.arrayElements(['GANGNAM','GANGDONG','GANGBUK','GANGSEO','GWANAK','GWANGJIN','GURO','GEUMCHEON','NOWON','DOBONG','DONGDAEMUN','DONGJAK','MAPO','SEODAEMUN','SEOCHO','SEONGDONG','SEONGBUK','SONGPA','YANGCHEON','YEONGDEUNGPO','YONGSAN','EUNPYEONG','JONGNO','SEOUL_JUNG','JUNGRANG','GAPYEONG','GOYANG','GWACHEON','GWANGMYEONG','GWANGJU','GURI','GUNPO','GIMPO','NAMYANGJU','DONGDUCHEON','BUCHEON','SEONGNAM','SUWON','SIHEUNG','ANSAN','ANSEONG','ANYANG','YANGJU','YANGPYEONG','YEOJU','YEONCHEON','OSAN','YONGIN','UIWANG','UIJEONGBU','ICHEON','PAJU','PYEONGTAEK','POCHEON','HANAM','HWASEONG','GANGHWA','GYEYANG','NAMDONG','INCHEON_DONG','MICHUHOL','BUPYEONG','SEO','YEONSU','ONGJIN','INCHEON_JUNG','DAEDEOK','DAEJEON_DONG','DAEJEON_SEO','YUSEONG','DAEJEON_JUNG','BUSAN_GANGSEO','GEUMJEONG','GIJANG','BUSAN_NAM','BUSAN_DONG','DONGNAE','BUSANJIN','BUSAN_BUK','SASANG','SAHA','BUSAN_SEO','SUYEONG','YEONJE','YEONGDO','BUSAN_JUNG','HAEUNDAE','ULSAN_NAM','ULSAN_DONG','ULSAN_BUK','ULJU','ULSAN_JUNG','GWANGSAN','GWANGJU_NAM','GWANGJU_DONG','GWANGJU_BUK','GWANGJU_SEO','GANGNEUNG','GOSEONG','DONGHAE','SAMCHEOK','SOKCHO','YANGGU','YANGYANG','YEONGWOL','WONJU','INJE','JEONGSEON','CHEORWON','CHUNCHEON','TAEBAEK','PYEONGCHANG','HONGCHEON','HWACHEON','HOENGSEONG','SEJONG','GOESAN','DANYANG','BOEUN','YEONGDONG','OKCHEON','EUMSEONG','JECHEON','JEUNGPYEONG','JINCHEON','CHEONGJU','CHUNGJU','GYERYONG','GONGJU','GEUMSAN','NONSAN','DANGJIN','BORYEONG','BUYEO','SEOSAN','SEOCHON','ASAN','YEONGI','YESAN','CHEONAN','CHEONGYANG','TAEAN','HONGSEONG','GYEONGSAN','GYEONGJU','GORYEONG','GUMI','GIMCHEON','MUNGYEONG','BONGHWA','SANGJU','SEONGJU','ANDONG','YEONGDEOK','YEONGYANG','YEONGJU','YEONGCHEON','YECHUN','ULLUNG','ULJIN','UISEONG','CHEONGDO','CHEONGSONG','CHILGOK','POHANG','GEOJE','GEOCHANG','GOSEONG_GN','GIMHAE','NAMHAE','MIRYANG','SACHEON','SANCHEONG','YANGSAN','UIRYEONG','JINJU','CHANGNYEONG','CHANGWON','TONGYEONG','HADONG','HAMAN','HAMYANG','HAPCHEON','GOCHANG','GUNSAN','GIMJE','NAMWON','MUJU','BUAN','SUNCHANG','WANJU','IKSAN','IMSIL','JANGSU','JEONJU','JEONGEUP','JINAN','GANGJIN','GOHEUNG','GOKSEONG','GWANGYANG','GURYE','NAJU','DAMYANG','MOKPO','MUAN','BOSEONG','SUNCHEON','SINAN','YEOSU','YEONGGWANG','YEONGAM','WANDO','JANGSEONG','JANGHEUNG','JINDO','HAMPYEONG','HAENAM','HWASUN','JEJU','SEOGWIPO','GUNWEE','DAEGU_NAM','DALSEO','DALSEONG','DAEGU_DONG','DAEGU_BUK','DAEGU_SEO','SUSEONG','DAEGU_JUNG'] as const)}, mbti: faker.helpers.arrayElement([faker.helpers.arrayElement(['ENFP','ENFJ','ENTJ','ENTP','ESFJ','ESFP','ESTJ','ESTP','INFJ','INFP','INTJ','INTP','ISFJ','ISFP','ISTJ','ISTP'] as const), undefined]), movie: faker.helpers.arrayElement([{cause: faker.word.sample(), movieName: faker.word.sample()}, undefined]), name: faker.word.sample(), pets: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), religion: {religionCategory: faker.helpers.arrayElement(['CHRISTIANITY','CATHOLICISM','BUDDHISM','IRRELIGION','ETC'] as const), religionName: faker.helpers.arrayElement([faker.word.sample(), undefined])}, smoking: {smokingAmount: faker.helpers.arrayElement([faker.word.sample(), undefined]), smokingCategory: faker.helpers.arrayElement(['NON_SMOKER','SMOKER','ETC'] as const)}}, ...overrideResponse})

export const getDeleteGroupInfoResponseMock = (): Unit => ({})

export const getGetAvailableCandidatesResponseMock = (): AvailableCandidateResponse[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({info: {birthDate: `${faker.date.past().toISOString().split('.')[0]}Z`, drinking: {drinkingAmount: faker.helpers.arrayElement([faker.word.sample(), undefined]), drinkingCategory: faker.helpers.arrayElement(['NON_DRINKER','DRINKER'] as const)}, gender: faker.helpers.arrayElement(['MALE','FEMALE'] as const), height: faker.number.int({min: undefined, max: undefined}), hobbies: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), id: faker.helpers.arrayElement([faker.word.sample(), undefined]), images: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({imageId: faker.word.sample(), url: faker.word.sample()})), job: {jobCategory: faker.helpers.arrayElement(['STUDENT','EMPLOYEE','FREELANCER','ETC'] as const), jobName: faker.word.sample()}, location: {cities: faker.helpers.arrayElements(['SEOUL','GYEONGGI','INCHEON','DAEJEON','DAEGU','BUSAN','ULSAN','GWANGJU','GANGWON','SEJONG','CHUNGCHEONGNAM','CHUNGCHEONGBUK','GYEONGSANGNAM','GYEONGSANGBUK','JEOLANAM','JEOLABUK','JEJU'] as const), towns: faker.helpers.arrayElements(['GANGNAM','GANGDONG','GANGBUK','GANGSEO','GWANAK','GWANGJIN','GURO','GEUMCHEON','NOWON','DOBONG','DONGDAEMUN','DONGJAK','MAPO','SEODAEMUN','SEOCHO','SEONGDONG','SEONGBUK','SONGPA','YANGCHEON','YEONGDEUNGPO','YONGSAN','EUNPYEONG','JONGNO','SEOUL_JUNG','JUNGRANG','GAPYEONG','GOYANG','GWACHEON','GWANGMYEONG','GWANGJU','GURI','GUNPO','GIMPO','NAMYANGJU','DONGDUCHEON','BUCHEON','SEONGNAM','SUWON','SIHEUNG','ANSAN','ANSEONG','ANYANG','YANGJU','YANGPYEONG','YEOJU','YEONCHEON','OSAN','YONGIN','UIWANG','UIJEONGBU','ICHEON','PAJU','PYEONGTAEK','POCHEON','HANAM','HWASEONG','GANGHWA','GYEYANG','NAMDONG','INCHEON_DONG','MICHUHOL','BUPYEONG','SEO','YEONSU','ONGJIN','INCHEON_JUNG','DAEDEOK','DAEJEON_DONG','DAEJEON_SEO','YUSEONG','DAEJEON_JUNG','BUSAN_GANGSEO','GEUMJEONG','GIJANG','BUSAN_NAM','BUSAN_DONG','DONGNAE','BUSANJIN','BUSAN_BUK','SASANG','SAHA','BUSAN_SEO','SUYEONG','YEONJE','YEONGDO','BUSAN_JUNG','HAEUNDAE','ULSAN_NAM','ULSAN_DONG','ULSAN_BUK','ULJU','ULSAN_JUNG','GWANGSAN','GWANGJU_NAM','GWANGJU_DONG','GWANGJU_BUK','GWANGJU_SEO','GANGNEUNG','GOSEONG','DONGHAE','SAMCHEOK','SOKCHO','YANGGU','YANGYANG','YEONGWOL','WONJU','INJE','JEONGSEON','CHEORWON','CHUNCHEON','TAEBAEK','PYEONGCHANG','HONGCHEON','HWACHEON','HOENGSEONG','SEJONG','GOESAN','DANYANG','BOEUN','YEONGDONG','OKCHEON','EUMSEONG','JECHEON','JEUNGPYEONG','JINCHEON','CHEONGJU','CHUNGJU','GYERYONG','GONGJU','GEUMSAN','NONSAN','DANGJIN','BORYEONG','BUYEO','SEOSAN','SEOCHON','ASAN','YEONGI','YESAN','CHEONAN','CHEONGYANG','TAEAN','HONGSEONG','GYEONGSAN','GYEONGJU','GORYEONG','GUMI','GIMCHEON','MUNGYEONG','BONGHWA','SANGJU','SEONGJU','ANDONG','YEONGDEOK','YEONGYANG','YEONGJU','YEONGCHEON','YECHUN','ULLUNG','ULJIN','UISEONG','CHEONGDO','CHEONGSONG','CHILGOK','POHANG','GEOJE','GEOCHANG','GOSEONG_GN','GIMHAE','NAMHAE','MIRYANG','SACHEON','SANCHEONG','YANGSAN','UIRYEONG','JINJU','CHANGNYEONG','CHANGWON','TONGYEONG','HADONG','HAMAN','HAMYANG','HAPCHEON','GOCHANG','GUNSAN','GIMJE','NAMWON','MUJU','BUAN','SUNCHANG','WANJU','IKSAN','IMSIL','JANGSU','JEONJU','JEONGEUP','JINAN','GANGJIN','GOHEUNG','GOKSEONG','GWANGYANG','GURYE','NAJU','DAMYANG','MOKPO','MUAN','BOSEONG','SUNCHEON','SINAN','YEOSU','YEONGGWANG','YEONGAM','WANDO','JANGSEONG','JANGHEUNG','JINDO','HAMPYEONG','HAENAM','HWASUN','JEJU','SEOGWIPO','GUNWEE','DAEGU_NAM','DALSEO','DALSEONG','DAEGU_DONG','DAEGU_BUK','DAEGU_SEO','SUSEONG','DAEGU_JUNG'] as const)}, mbti: faker.helpers.arrayElement([faker.helpers.arrayElement(['ENFP','ENFJ','ENTJ','ENTP','ESFJ','ESFP','ESTJ','ESTP','INFJ','INFP','INTJ','INTP','ISFJ','ISFP','ISTJ','ISTP'] as const), undefined]), name: faker.word.sample(), religion: {religionCategory: faker.helpers.arrayElement(['CHRISTIANITY','CATHOLICISM','BUDDHISM','IRRELIGION','ETC'] as const), religionName: faker.helpers.arrayElement([faker.word.sample(), undefined])}, smoking: {smokingAmount: faker.helpers.arrayElement([faker.word.sample(), undefined]), smokingCategory: faker.helpers.arrayElement(['NON_SMOKER','SMOKER','ETC'] as const)}}, isAlreadyInGroup: faker.datatype.boolean()})))

export const getGetGroupInfoByInviteKeyResponseMock = (overrideResponse: Partial< ValidateGroupInviteLinkResponse > = {}): ValidateGroupInviteLinkResponse => ({creatorName: faker.helpers.arrayElement([faker.word.sample(), undefined]), groupId: faker.helpers.arrayElement([faker.word.sample(), undefined]), groupName: faker.helpers.arrayElement([faker.word.sample(), undefined]), isValid: faker.datatype.boolean(), reason: faker.helpers.arrayElement([faker.word.sample(), undefined]), ...overrideResponse})

export const getLoginKakaoResponseMock = (overrideResponse: Partial< UserTokenDto > = {}): UserTokenDto => ({accessToken: faker.word.sample(), refreshToken: faker.word.sample(), ...overrideResponse})

export const getInfoResponseMock = (overrideResponse: Partial< UserInfoResponse > = {}): UserInfoResponse => ({email: faker.helpers.arrayElement([faker.word.sample(), undefined]), joinType: faker.helpers.arrayElement(['KAKAO','EMAIL'] as const), name: faker.word.sample(), profileImage: faker.helpers.arrayElement([faker.word.sample(), undefined]), receiveEmail: faker.datatype.boolean(), userId: faker.word.sample(), ...overrideResponse})

export const getGetUserEnrollmentStatusResponseMock = (overrideResponse: Partial< UserEnrollmentStatusResponse > = {}): UserEnrollmentStatusResponse => ({hasEmail: faker.datatype.boolean(), hasSeenOnboarding: faker.datatype.boolean(), inEmailOptOut: faker.datatype.boolean(), ...overrideResponse})

export const getDeleteInfoResponseMock = (): string => (faker.word.sample())

export const getQuitResponseMock = (): Unit => ({})


export const getUpdateLinkOpenMockHandler = (overrideResponse?: Unit | ((info: Parameters<Parameters<typeof http.put>[1]>[0]) => Promise<Unit> | Unit)) => {
  return http.put('*/api/v1/link/link-open', async (info) => {await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getUpdateLinkOpenResponseMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getRegenerateLinkKeyMockHandler = (overrideResponse?: CreateLinkResponse | ((info: Parameters<Parameters<typeof http.put>[1]>[0]) => Promise<CreateLinkResponse> | CreateLinkResponse)) => {
  return http.put('*/api/v1/link/key', async (info) => {await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getRegenerateLinkKeyResponseMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getUpdateInfoMockHandler = (overrideResponse?: string | ((info: Parameters<Parameters<typeof http.put>[1]>[0]) => Promise<string> | string)) => {
  return http.put('*/api/v1/info', async (info) => {await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getUpdateInfoResponseMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getUpdateGroupMockHandler = (overrideResponse?: UpdateGroupResponse | ((info: Parameters<Parameters<typeof http.put>[1]>[0]) => Promise<UpdateGroupResponse> | UpdateGroupResponse)) => {
  return http.put('*/api/v1/groups/:groupId', async (info) => {await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getUpdateGroupResponseMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getDeleteGroupMockHandler = (overrideResponse?: Unit | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<Unit> | Unit)) => {
  return http.delete('*/api/v1/groups/:groupId', async (info) => {await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getDeleteGroupResponseMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getManageMemberMockHandler = (overrideResponse?: ManageInvitationResponse | ((info: Parameters<Parameters<typeof http.put>[1]>[0]) => Promise<ManageInvitationResponse> | ManageInvitationResponse)) => {
  return http.put('*/api/v1/groups/:groupId/members/:memberId/manage', async (info) => {await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getManageMemberResponseMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getUpdateGroupInfoCommentMockHandler = (overrideResponse?: Unit | ((info: Parameters<Parameters<typeof http.put>[1]>[0]) => Promise<Unit> | Unit)) => {
  return http.put('*/api/v1/groups/:groupId/group-infos/:infoId/comment', async (info) => {await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getUpdateGroupInfoCommentResponseMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getUpdateProfileImageMockHandler = (overrideResponse?: boolean | ((info: Parameters<Parameters<typeof http.put>[1]>[0]) => Promise<boolean> | boolean)) => {
  return http.put('*/api/v1/auth/profile-image', async (info) => {await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getUpdateProfileImageResponseMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getUpdatePasswordMockHandler = (overrideResponse?: boolean | ((info: Parameters<Parameters<typeof http.put>[1]>[0]) => Promise<boolean> | boolean)) => {
  return http.put('*/api/v1/auth/password', async (info) => {await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getUpdatePasswordResponseMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getUpdateNameMockHandler = (overrideResponse?: boolean | ((info: Parameters<Parameters<typeof http.put>[1]>[0]) => Promise<boolean> | boolean)) => {
  return http.put('*/api/v1/auth/name', async (info) => {await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getUpdateNameResponseMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getUpdateEmailMockHandler = (overrideResponse?: boolean | ((info: Parameters<Parameters<typeof http.put>[1]>[0]) => Promise<boolean> | boolean)) => {
  return http.put('*/api/v1/auth/email', async (info) => {await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getUpdateEmailResponseMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getUpdateReceiveEmailMockHandler = (overrideResponse?: boolean | ((info: Parameters<Parameters<typeof http.put>[1]>[0]) => Promise<boolean> | boolean)) => {
  return http.put('*/api/v1/auth/email/receive', async (info) => {await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getUpdateReceiveEmailResponseMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getSaveSharingMockHandler = (overrideResponse?: SaveSharingResponse | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<SaveSharingResponse> | SaveSharingResponse)) => {
  return http.post('*/api/v1/sharing/:infoId', async (info) => {await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getSaveSharingResponseMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getSaveSharingWithGroupMockHandler = (overrideResponse?: SaveSharingResponse | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<SaveSharingResponse> | SaveSharingResponse)) => {
  return http.post('*/api/v1/sharing/groups/:groupId/infos/:infoId', async (info) => {await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getSaveSharingWithGroupResponseMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getCreateLinkMockHandler = (overrideResponse?: CreateLinkResponse | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<CreateLinkResponse> | CreateLinkResponse)) => {
  return http.post('*/api/v1/link', async (info) => {await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getCreateLinkResponseMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getSaveInfoMockHandler = (overrideResponse?: string | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<string> | string)) => {
  return http.post('*/api/v1/info/save', async (info) => {await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getSaveInfoResponseMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getUploadImageMockHandler = (overrideResponse?: ImageDto | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<ImageDto> | ImageDto)) => {
  return http.post('*/api/v1/image/upload', async (info) => {await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getUploadImageResponseMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getGetMyGroupsMockHandler = (overrideResponse?: GroupInfoResponse[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<GroupInfoResponse[]> | GroupInfoResponse[])) => {
  return http.get('*/api/v1/groups', async (info) => {await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGetMyGroupsResponseMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getCreateGroupMockHandler = (overrideResponse?: CreateGroupResponse | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<CreateGroupResponse> | CreateGroupResponse)) => {
  return http.post('*/api/v1/groups', async (info) => {await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getCreateGroupResponseMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getCreateGroupInviteLinkMockHandler = (overrideResponse?: CreateGroupInviteLinkResponse | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<CreateGroupInviteLinkResponse> | CreateGroupInviteLinkResponse)) => {
  return http.post('*/api/v1/groups/:groupId/invite-link', async (info) => {await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getCreateGroupInviteLinkResponseMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getCreateGroupInfoListMockHandler = (overrideResponse?: Unit | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<Unit> | Unit)) => {
  return http.post('*/api/v1/groups/group-infos', async (info) => {await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getCreateGroupInfoListResponseMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getApplyToJoinGroupMockHandler = (overrideResponse?: ApplyToJoinGroupResponse | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<ApplyToJoinGroupResponse> | ApplyToJoinGroupResponse)) => {
  return http.post('*/api/v1/groups/apply', async (info) => {await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getApplyToJoinGroupResponseMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getRefreshTokenMockHandler = (overrideResponse?: UserTokenDto | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<UserTokenDto> | UserTokenDto)) => {
  return http.post('*/api/v1/auth/refresh-token', async (info) => {await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getRefreshTokenResponseMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getVerifyExistedPasswordMockHandler = (overrideResponse?: boolean | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<boolean> | boolean)) => {
  return http.post('*/api/v1/auth/password/verify', async (info) => {await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getVerifyExistedPasswordResponseMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getLogoutMockHandler = (overrideResponse?: Unit | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<Unit> | Unit)) => {
  return http.post('*/api/v1/auth/logout', async (info) => {await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getLogoutResponseMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getVerifyEmailVerifyCodeMockHandler = (overrideResponse?: boolean | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<boolean> | boolean)) => {
  return http.post('*/api/v1/auth/email/verify-code/verify', async (info) => {await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getVerifyEmailVerifyCodeResponseMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getSendEmailVerifyCodeMockHandler = (overrideResponse?: boolean | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<boolean> | boolean)) => {
  return http.post('*/api/v1/auth/email/verify-code/send', async (info) => {await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getSendEmailVerifyCodeResponseMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getSignupMockHandler = (overrideResponse?: UserTokenDto | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<UserTokenDto> | UserTokenDto)) => {
  return http.post('*/api/v1/auth/email/signup', async (info) => {await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getSignupResponseMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getVerifyEmailSignupMockHandler = (overrideResponse?: boolean | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<boolean> | boolean)) => {
  return http.post('*/api/v1/auth/email/signup/verify-code/verify', async (info) => {await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getVerifyEmailSignupResponseMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getOptOutEmailMockHandler = (overrideResponse?: boolean | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<boolean> | boolean)) => {
  return http.post('*/api/v1/auth/email/opt-out', async (info) => {await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getOptOutEmailResponseMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getLoginMockHandler = (overrideResponse?: UserTokenDto | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<UserTokenDto> | UserTokenDto)) => {
  return http.post('*/api/v1/auth/email/login', async (info) => {await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getLoginResponseMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getVerifyCommonVerificationMailMockHandler = (overrideResponse?: VerificationResultDto | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<VerificationResultDto> | VerificationResultDto)) => {
  return http.post('*/api/v1/auth/email/common/verify-code/verify', async (info) => {await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getVerifyCommonVerificationMailResponseMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getSendCommonVerificationMailMockHandler = (overrideResponse?: boolean | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<boolean> | boolean)) => {
  return http.post('*/api/v1/auth/email/common/verify-code/send', async (info) => {await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getSendCommonVerificationMailResponseMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getHealthMockHandler = (overrideResponse?: string | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<string> | string)) => {
  return http.get('*/health', async (info) => {await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getHealthResponseMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getLogMockHandler = (overrideResponse?: string | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<string> | string)) => {
  return http.get('*/health/log', async (info) => {await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getLogResponseMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getGetInfoBySharingIdMockHandler = (overrideResponse?: InfoToShareResponse | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<InfoToShareResponse> | InfoToShareResponse)) => {
  return http.get('*/api/v1/sharing/public/:sharingId', async (info) => {await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGetInfoBySharingIdResponseMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getValidateLinkMockHandler = (overrideResponse?: ValidateLinkResponse | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<ValidateLinkResponse> | ValidateLinkResponse)) => {
  return http.get('*/api/v1/link/valid/:linkKey', async (info) => {await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getValidateLinkResponseMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getGetLinkByMatchMakerIdMockHandler = (overrideResponse?: LinkStatusResponse | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<LinkStatusResponse> | LinkStatusResponse)) => {
  return http.get('*/api/v1/link/status', async (info) => {await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGetLinkByMatchMakerIdResponseMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getGetMatchMakerNameMockHandler = (overrideResponse?: string | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<string> | string)) => {
  return http.get('*/api/v1/link/match-maker/:linkKey', async (info) => {await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGetMatchMakerNameResponseMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getSearchInfoMockHandler = (overrideResponse?: SearchInfoResponse | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<SearchInfoResponse> | SearchInfoResponse)) => {
  return http.get('*/api/v1/info/search', async (info) => {await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getSearchInfoResponseMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getGetInfoMockHandler = (overrideResponse?: DetailedInfoDto | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<DetailedInfoDto> | DetailedInfoDto)) => {
  return http.get('*/api/v1/info/detail/:id', async (info) => {await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGetInfoResponseMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getGetAllInfoMockHandler = (overrideResponse?: ArchivedInfoResponse[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<ArchivedInfoResponse[]> | ArchivedInfoResponse[])) => {
  return http.get('*/api/v1/info/all', async (info) => {await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGetAllInfoResponseMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getGetAddressMockHandler = (overrideResponse?: CityAndTownResponse[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<CityAndTownResponse[]> | CityAndTownResponse[])) => {
  return http.get('*/api/v1/info/address', async (info) => {await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGetAddressResponseMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getSearchGroupInfoMockHandler = (overrideResponse?: SearchGroupInfoResponse | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<SearchGroupInfoResponse> | SearchGroupInfoResponse)) => {
  return http.get('*/api/v1/groups/:groupId/search', async (info) => {await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getSearchGroupInfoResponseMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getGetGroupMembersMockHandler = (overrideResponse?: GroupMemberResponse[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<GroupMemberResponse[]> | GroupMemberResponse[])) => {
  return http.get('*/api/v1/groups/:groupId/members', async (info) => {await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGetGroupMembersResponseMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getGetGroupInfoMockHandler = (overrideResponse?: GroupInfoResponse | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<GroupInfoResponse> | GroupInfoResponse)) => {
  return http.get('*/api/v1/groups/:groupId/info', async (info) => {await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGetGroupInfoResponseMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getGetGroupHistoryMockHandler = (overrideResponse?: GroupHistoryResponse[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<GroupHistoryResponse[]> | GroupHistoryResponse[])) => {
  return http.get('*/api/v1/groups/:groupId/history', async (info) => {await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGetGroupHistoryResponseMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getGetGroupInfoDetailMockHandler = (overrideResponse?: GroupInfoDetailResponse | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<GroupInfoDetailResponse> | GroupInfoDetailResponse)) => {
  return http.get('*/api/v1/groups/:groupId/group-infos/:infoId', async (info) => {await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGetGroupInfoDetailResponseMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getDeleteGroupInfoMockHandler = (overrideResponse?: Unit | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<Unit> | Unit)) => {
  return http.delete('*/api/v1/groups/:groupId/group-infos/:infoId', async (info) => {await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getDeleteGroupInfoResponseMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getGetAvailableCandidatesMockHandler = (overrideResponse?: AvailableCandidateResponse[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<AvailableCandidateResponse[]> | AvailableCandidateResponse[])) => {
  return http.get('*/api/v1/groups/:groupId/candidates', async (info) => {await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGetAvailableCandidatesResponseMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getGetGroupInfoByInviteKeyMockHandler = (overrideResponse?: ValidateGroupInviteLinkResponse | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<ValidateGroupInviteLinkResponse> | ValidateGroupInviteLinkResponse)) => {
  return http.get('*/api/v1/groups/invite/:inviteKey', async (info) => {await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGetGroupInfoByInviteKeyResponseMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getLoginKakaoMockHandler = (overrideResponse?: UserTokenDto | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<UserTokenDto> | UserTokenDto)) => {
  return http.get('*/api/v1/auth/kakao/login', async (info) => {await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getLoginKakaoResponseMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getInfoMockHandler = (overrideResponse?: UserInfoResponse | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<UserInfoResponse> | UserInfoResponse)) => {
  return http.get('*/api/v1/auth/info', async (info) => {await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getInfoResponseMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getGetUserEnrollmentStatusMockHandler = (overrideResponse?: UserEnrollmentStatusResponse | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<UserEnrollmentStatusResponse> | UserEnrollmentStatusResponse)) => {
  return http.get('*/api/v1/auth/enrollment-status', async (info) => {await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGetUserEnrollmentStatusResponseMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getDeleteInfoMockHandler = (overrideResponse?: string | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<string> | string)) => {
  return http.delete('*/api/v1/info/:id', async (info) => {await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getDeleteInfoResponseMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getQuitMockHandler = (overrideResponse?: Unit | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<Unit> | Unit)) => {
  return http.delete('*/api/v1/auth/quit', async (info) => {await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getQuitResponseMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}
export const getGoogooApiMock = () => [
  getUpdateLinkOpenMockHandler(),
  getRegenerateLinkKeyMockHandler(),
  getUpdateInfoMockHandler(),
  getUpdateGroupMockHandler(),
  getDeleteGroupMockHandler(),
  getManageMemberMockHandler(),
  getUpdateGroupInfoCommentMockHandler(),
  getUpdateProfileImageMockHandler(),
  getUpdatePasswordMockHandler(),
  getUpdateNameMockHandler(),
  getUpdateEmailMockHandler(),
  getUpdateReceiveEmailMockHandler(),
  getSaveSharingMockHandler(),
  getSaveSharingWithGroupMockHandler(),
  getCreateLinkMockHandler(),
  getSaveInfoMockHandler(),
  getUploadImageMockHandler(),
  getGetMyGroupsMockHandler(),
  getCreateGroupMockHandler(),
  getCreateGroupInviteLinkMockHandler(),
  getCreateGroupInfoListMockHandler(),
  getApplyToJoinGroupMockHandler(),
  getRefreshTokenMockHandler(),
  getVerifyExistedPasswordMockHandler(),
  getLogoutMockHandler(),
  getVerifyEmailVerifyCodeMockHandler(),
  getSendEmailVerifyCodeMockHandler(),
  getSignupMockHandler(),
  getVerifyEmailSignupMockHandler(),
  getOptOutEmailMockHandler(),
  getLoginMockHandler(),
  getVerifyCommonVerificationMailMockHandler(),
  getSendCommonVerificationMailMockHandler(),
  getHealthMockHandler(),
  getLogMockHandler(),
  getGetInfoBySharingIdMockHandler(),
  getValidateLinkMockHandler(),
  getGetLinkByMatchMakerIdMockHandler(),
  getGetMatchMakerNameMockHandler(),
  getSearchInfoMockHandler(),
  getGetInfoMockHandler(),
  getGetAllInfoMockHandler(),
  getGetAddressMockHandler(),
  getSearchGroupInfoMockHandler(),
  getGetGroupMembersMockHandler(),
  getGetGroupInfoMockHandler(),
  getGetGroupHistoryMockHandler(),
  getGetGroupInfoDetailMockHandler(),
  getDeleteGroupInfoMockHandler(),
  getGetAvailableCandidatesMockHandler(),
  getGetGroupInfoByInviteKeyMockHandler(),
  getLoginKakaoMockHandler(),
  getInfoMockHandler(),
  getGetUserEnrollmentStatusMockHandler(),
  getDeleteInfoMockHandler(),
  getQuitMockHandler()]
